import createPacketParser, { createBufferPacketParser, createDataViewPacketParser } from 'msg-fabric-packet-stream';
import { URL } from 'url';
import { randomBytes } from 'crypto';

function basic_router_plugin(plugin_options = {}) {
  const random_id_self = plugin_options.random_id_self || _random_id_self;
  return { subclass(FiberHub_PI, bases) {
      Object.assign(FiberHub_PI.prototype, {
        packetParser: createPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function _random_id_self() {
  return 0 | Math.random() * 0xffffffff;
}

function browser_router_plugin(plugin_options = {}) {
  return { subclass(FiberHub_PI, bases) {
      Object.assign(FiberHub_PI.prototype, {
        packetParser: createDataViewPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self() {
  const ua = new Int32Array(1),
        dv = new DataView(ua.buffer);
  if ('undefined' !== typeof window) {
    window.crypto.getRandomValues(ua);
  } else {
    ua[0] = 0xffffffff * Math.random();
  }
  return dv.getInt32(0, true);
}

function nodejs_router_plugin(plugin_options = {}) {
  return { subclass(FiberHub_PI, bases) {
      Object.assign(FiberHub_PI.prototype, {
        packetParser: createBufferPacketParser(plugin_options),

        _parseConnectURL(conn_url) {
          return new URL(conn_url);
        },

        _init_router() {
          const id_self = random_id_self$1();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self$1() {
  return randomBytes(4).readInt32LE();
}

export { basic_router_plugin as basic, browser_router_plugin as browser, nodejs_router_plugin as node };
export default nodejs_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvYmFzaWMuanN5IiwiLi4vY29kZS9wbHVnaW5zL3JvdXRlci9icm93c2VyLmpzeSIsIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvbm9kZS5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVBhY2tldFBhcnNlciBmcm9tICdtc2ctZmFicmljLXBhY2tldC1zdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhc2ljX3JvdXRlcl9wbHVnaW4ocGx1Z2luX29wdGlvbnM9e30pIDo6XG4gIGNvbnN0IHJhbmRvbV9pZF9zZWxmID0gcGx1Z2luX29wdGlvbnMucmFuZG9tX2lkX3NlbGYgfHwgX3JhbmRvbV9pZF9zZWxmXG4gIHJldHVybiBAOiBzdWJjbGFzcyhGaWJlckh1Yl9QSSwgYmFzZXMpIDo6XG4gICAgT2JqZWN0LmFzc2lnbiBAIEZpYmVySHViX1BJLnByb3RvdHlwZSwgQDpcbiAgICAgIHBhY2tldFBhcnNlcjogY3JlYXRlUGFja2V0UGFyc2VyIEAgcGx1Z2luX29wdGlvbnNcblxuICAgICAgX2luaXRfcm91dGVyKCkgOjpcbiAgICAgICAgY29uc3QgaWRfc2VsZiA9IHJhbmRvbV9pZF9zZWxmKClcbiAgICAgICAgY29uc3Qgcm91dGVyID0gbmV3IGJhc2VzLlJvdXRlcihpZF9zZWxmKVxuICAgICAgICByb3V0ZXIuYWxsb3dVbnZlcmlmaWVkUm91dGVzID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcm91dGVyXG5cbmZ1bmN0aW9uIF9yYW5kb21faWRfc2VsZigpIDo6XG4gIHJldHVybiAwIHwgTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmZcbiIsImltcG9ydCB7Y3JlYXRlRGF0YVZpZXdQYWNrZXRQYXJzZXIgYXMgY3JlYXRlUGFja2V0UGFyc2VyfSBmcm9tICdtc2ctZmFicmljLXBhY2tldC1zdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJyb3dzZXJfcm91dGVyX3BsdWdpbihwbHVnaW5fb3B0aW9ucz17fSkgOjpcbiAgcmV0dXJuIEA6IHN1YmNsYXNzKEZpYmVySHViX1BJLCBiYXNlcykgOjpcbiAgICBPYmplY3QuYXNzaWduIEAgRmliZXJIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuXG4gICAgICBfaW5pdF9yb3V0ZXIoKSA6OlxuICAgICAgICBjb25zdCBpZF9zZWxmID0gcmFuZG9tX2lkX3NlbGYoKVxuICAgICAgICBjb25zdCByb3V0ZXIgPSBuZXcgYmFzZXMuUm91dGVyKGlkX3NlbGYpXG4gICAgICAgIHJvdXRlci5hbGxvd1VudmVyaWZpZWRSb3V0ZXMgPSB0cnVlXG4gICAgICAgIHJldHVybiByb3V0ZXJcblxuZnVuY3Rpb24gcmFuZG9tX2lkX3NlbGYoKSA6OlxuICBjb25zdCB1YSA9IG5ldyBJbnQzMkFycmF5KDEpLCBkdiA9IG5ldyBEYXRhVmlldyh1YS5idWZmZXIpXG4gIGlmICd1bmRlZmluZWQnICE9PSB0eXBlb2Ygd2luZG93IDo6XG4gICAgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXModWEpXG4gIGVsc2UgOjpcbiAgICB1YVswXSA9IDB4ZmZmZmZmZmYgKiBNYXRoLnJhbmRvbSgpXG4gIHJldHVybiBkdi5nZXRJbnQzMigwLCB0cnVlKVxuIiwiaW1wb3J0IHtVUkx9IGZyb20gJ3VybCdcbmltcG9ydCB7cmFuZG9tQnl0ZXN9IGZyb20gJ2NyeXB0bydcbmltcG9ydCB7Y3JlYXRlQnVmZmVyUGFja2V0UGFyc2VyIGFzIGNyZWF0ZVBhY2tldFBhcnNlcn0gZnJvbSAnbXNnLWZhYnJpYy1wYWNrZXQtc3RyZWFtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlanNfcm91dGVyX3BsdWdpbihwbHVnaW5fb3B0aW9ucz17fSkgOjpcbiAgcmV0dXJuIEA6IHN1YmNsYXNzKEZpYmVySHViX1BJLCBiYXNlcykgOjpcbiAgICBPYmplY3QuYXNzaWduIEAgRmliZXJIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuXG4gICAgICBfcGFyc2VDb25uZWN0VVJMKGNvbm5fdXJsKSA6OlxuICAgICAgICByZXR1cm4gbmV3IFVSTChjb25uX3VybClcblxuICAgICAgX2luaXRfcm91dGVyKCkgOjpcbiAgICAgICAgY29uc3QgaWRfc2VsZiA9IHJhbmRvbV9pZF9zZWxmKClcbiAgICAgICAgY29uc3Qgcm91dGVyID0gbmV3IGJhc2VzLlJvdXRlcihpZF9zZWxmKVxuICAgICAgICByb3V0ZXIuYWxsb3dVbnZlcmlmaWVkUm91dGVzID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcm91dGVyXG5cbmZ1bmN0aW9uIHJhbmRvbV9pZF9zZWxmKCkgOjpcbiAgcmV0dXJuIHJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKClcbiJdLCJuYW1lcyI6WyJiYXNpY19yb3V0ZXJfcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJyYW5kb21faWRfc2VsZiIsIl9yYW5kb21faWRfc2VsZiIsInN1YmNsYXNzIiwiRmliZXJIdWJfUEkiLCJiYXNlcyIsImFzc2lnbiIsInByb3RvdHlwZSIsImNyZWF0ZVBhY2tldFBhcnNlciIsImlkX3NlbGYiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJhbGxvd1VudmVyaWZpZWRSb3V0ZXMiLCJNYXRoIiwicmFuZG9tIiwiYnJvd3Nlcl9yb3V0ZXJfcGx1Z2luIiwidWEiLCJJbnQzMkFycmF5IiwiZHYiLCJEYXRhVmlldyIsImJ1ZmZlciIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImdldEludDMyIiwibm9kZWpzX3JvdXRlcl9wbHVnaW4iLCJjb25uX3VybCIsIlVSTCIsInJhbmRvbUJ5dGVzIiwicmVhZEludDMyTEUiXSwibWFwcGluZ3MiOiI7Ozs7QUFFZSxTQUFTQSxtQkFBVCxDQUE2QkMsaUJBQWUsRUFBNUMsRUFBZ0Q7UUFDdkRDLGlCQUFpQkQsZUFBZUMsY0FBZixJQUFpQ0MsZUFBeEQ7U0FDUyxFQUFDQyxTQUFTQyxXQUFULEVBQXNCQyxLQUF0QixFQUE2QjthQUM5QkMsTUFBUCxDQUFnQkYsWUFBWUcsU0FBNUIsRUFBeUM7c0JBQ3pCQyxtQkFBcUJSLGNBQXJCLENBRHlCOzt1QkFHeEI7Z0JBQ1BTLFVBQVVSLGdCQUFoQjtnQkFDTVMsU0FBUyxJQUFJTCxNQUFNTSxNQUFWLENBQWlCRixPQUFqQixDQUFmO2lCQUNPRyxxQkFBUCxHQUErQixJQUEvQjtpQkFDT0YsTUFBUDtTQVBxQyxFQUF6QztLQURPLEVBQVQ7OztBQVVGLFNBQVNSLGVBQVQsR0FBMkI7U0FDbEIsSUFBSVcsS0FBS0MsTUFBTCxLQUFnQixVQUEzQjs7O0FDYmEsU0FBU0MscUJBQVQsQ0FBK0JmLGlCQUFlLEVBQTlDLEVBQWtEO1NBQ3RELEVBQUNHLFNBQVNDLFdBQVQsRUFBc0JDLEtBQXRCLEVBQTZCO2FBQzlCQyxNQUFQLENBQWdCRixZQUFZRyxTQUE1QixFQUF5QztzQkFDekJDLDJCQUFxQlIsY0FBckIsQ0FEeUI7O3VCQUd4QjtnQkFDUFMsVUFBVVIsZ0JBQWhCO2dCQUNNUyxTQUFTLElBQUlMLE1BQU1NLE1BQVYsQ0FBaUJGLE9BQWpCLENBQWY7aUJBQ09HLHFCQUFQLEdBQStCLElBQS9CO2lCQUNPRixNQUFQO1NBUHFDLEVBQXpDO0tBRE8sRUFBVDs7O0FBVUYsU0FBU1QsY0FBVCxHQUEwQjtRQUNsQmUsS0FBSyxJQUFJQyxVQUFKLENBQWUsQ0FBZixDQUFYO1FBQThCQyxLQUFLLElBQUlDLFFBQUosQ0FBYUgsR0FBR0ksTUFBaEIsQ0FBbkM7TUFDRyxnQkFBZ0IsT0FBT0MsTUFBMUIsRUFBbUM7V0FDMUJDLE1BQVAsQ0FBY0MsZUFBZCxDQUE4QlAsRUFBOUI7R0FERixNQUVLO09BQ0EsQ0FBSCxJQUFRLGFBQWFILEtBQUtDLE1BQUwsRUFBckI7O1NBQ0tJLEdBQUdNLFFBQUgsQ0FBWSxDQUFaLEVBQWUsSUFBZixDQUFQOzs7QUNmYSxTQUFTQyxvQkFBVCxDQUE4QnpCLGlCQUFlLEVBQTdDLEVBQWlEO1NBQ3JELEVBQUNHLFNBQVNDLFdBQVQsRUFBc0JDLEtBQXRCLEVBQTZCO2FBQzlCQyxNQUFQLENBQWdCRixZQUFZRyxTQUE1QixFQUF5QztzQkFDekJDLHlCQUFxQlIsY0FBckIsQ0FEeUI7O3lCQUd0QjBCLFFBQWpCLEVBQTJCO2lCQUNsQixJQUFJQyxHQUFKLENBQVFELFFBQVIsQ0FBUDtTQUpxQzs7dUJBTXhCO2dCQUNQakIsVUFBVVIsa0JBQWhCO2dCQUNNUyxTQUFTLElBQUlMLE1BQU1NLE1BQVYsQ0FBaUJGLE9BQWpCLENBQWY7aUJBQ09HLHFCQUFQLEdBQStCLElBQS9CO2lCQUNPRixNQUFQO1NBVnFDLEVBQXpDO0tBRE8sRUFBVDs7O0FBYUYsU0FBU1QsZ0JBQVQsR0FBMEI7U0FDakIyQixZQUFZLENBQVosRUFBZUMsV0FBZixFQUFQOzs7Ozs7In0=
