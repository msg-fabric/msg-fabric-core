import createPacketParser, { createBufferPacketParser, createDataViewPacketParser } from 'msg-fabric-packet-stream';
import { URL } from 'url';
import { randomBytes } from 'crypto';

function basic_router_plugin(plugin_options = {}) {
  const random_id_self = plugin_options.random_id_self || _random_id_self;
  return { order: -2, subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function _random_id_self() {
  return 0 | Math.random() * 0xffffffff;
}

function browser_router_plugin(plugin_options = {}) {
  return { order: -2, subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createDataViewPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self() {
  const ua = new Int32Array(1),
        dv = new DataView(ua.buffer);
  if ('undefined' !== typeof window) {
    window.crypto.getRandomValues(ua);
  } else {
    ua[0] = 0xffffffff * Math.random();
  }
  return dv.getInt32(0, true);
}

function nodejs_router_plugin(plugin_options = {}) {
  return { order: -2, subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createBufferPacketParser(plugin_options),

        _parseConnectURL(conn_url) {
          return new URL(conn_url);
        },

        _init_router() {
          const id_self = random_id_self$1();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self$1() {
  return randomBytes(4).readInt32LE();
}

export { basic_router_plugin as basic, browser_router_plugin as browser, nodejs_router_plugin as node };
export default nodejs_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvYmFzaWMuanN5IiwiLi4vY29kZS9wbHVnaW5zL3JvdXRlci9icm93c2VyLmpzeSIsIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvbm9kZS5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVBhY2tldFBhcnNlciBmcm9tICdtc2ctZmFicmljLXBhY2tldC1zdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhc2ljX3JvdXRlcl9wbHVnaW4ocGx1Z2luX29wdGlvbnM9e30pIDo6XG4gIGNvbnN0IHJhbmRvbV9pZF9zZWxmID0gcGx1Z2luX29wdGlvbnMucmFuZG9tX2lkX3NlbGYgfHwgX3JhbmRvbV9pZF9zZWxmXG4gIHJldHVybiBAOiBvcmRlcjogLTIsIHN1YmNsYXNzKEZhYnJpY0h1Yl9QSSwgYmFzZXMpIDo6XG4gICAgT2JqZWN0LmFzc2lnbiBAIEZhYnJpY0h1Yl9QSS5wcm90b3R5cGUsIEA6XG4gICAgICBwYWNrZXRQYXJzZXI6IGNyZWF0ZVBhY2tldFBhcnNlciBAIHBsdWdpbl9vcHRpb25zXG5cbiAgICAgIF9pbml0X3JvdXRlcigpIDo6XG4gICAgICAgIGNvbnN0IGlkX3NlbGYgPSByYW5kb21faWRfc2VsZigpXG4gICAgICAgIGNvbnN0IHJvdXRlciA9IG5ldyBiYXNlcy5Sb3V0ZXIoaWRfc2VsZilcbiAgICAgICAgcm91dGVyLmFsbG93VW52ZXJpZmllZFJvdXRlcyA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJvdXRlclxuXG5mdW5jdGlvbiBfcmFuZG9tX2lkX3NlbGYoKSA6OlxuICByZXR1cm4gMCB8IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmXG4iLCJpbXBvcnQge2NyZWF0ZURhdGFWaWV3UGFja2V0UGFyc2VyIGFzIGNyZWF0ZVBhY2tldFBhcnNlcn0gZnJvbSAnbXNnLWZhYnJpYy1wYWNrZXQtc3RyZWFtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBicm93c2VyX3JvdXRlcl9wbHVnaW4ocGx1Z2luX29wdGlvbnM9e30pIDo6XG4gIHJldHVybiBAOiBvcmRlcjogLTIsIHN1YmNsYXNzKEZhYnJpY0h1Yl9QSSwgYmFzZXMpIDo6XG4gICAgT2JqZWN0LmFzc2lnbiBAIEZhYnJpY0h1Yl9QSS5wcm90b3R5cGUsIEA6XG4gICAgICBwYWNrZXRQYXJzZXI6IGNyZWF0ZVBhY2tldFBhcnNlciBAIHBsdWdpbl9vcHRpb25zXG5cbiAgICAgIF9pbml0X3JvdXRlcigpIDo6XG4gICAgICAgIGNvbnN0IGlkX3NlbGYgPSByYW5kb21faWRfc2VsZigpXG4gICAgICAgIGNvbnN0IHJvdXRlciA9IG5ldyBiYXNlcy5Sb3V0ZXIoaWRfc2VsZilcbiAgICAgICAgcm91dGVyLmFsbG93VW52ZXJpZmllZFJvdXRlcyA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJvdXRlclxuXG5mdW5jdGlvbiByYW5kb21faWRfc2VsZigpIDo6XG4gIGNvbnN0IHVhID0gbmV3IEludDMyQXJyYXkoMSksIGR2ID0gbmV3IERhdGFWaWV3KHVhLmJ1ZmZlcilcbiAgaWYgJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB3aW5kb3cgOjpcbiAgICB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1YSlcbiAgZWxzZSA6OlxuICAgIHVhWzBdID0gMHhmZmZmZmZmZiAqIE1hdGgucmFuZG9tKClcbiAgcmV0dXJuIGR2LmdldEludDMyKDAsIHRydWUpXG4iLCJpbXBvcnQge1VSTH0gZnJvbSAndXJsJ1xuaW1wb3J0IHtyYW5kb21CeXRlc30gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHtjcmVhdGVCdWZmZXJQYWNrZXRQYXJzZXIgYXMgY3JlYXRlUGFja2V0UGFyc2VyfSBmcm9tICdtc2ctZmFicmljLXBhY2tldC1zdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZGVqc19yb3V0ZXJfcGx1Z2luKHBsdWdpbl9vcHRpb25zPXt9KSA6OlxuICByZXR1cm4gQDogb3JkZXI6IC0yLCBzdWJjbGFzcyhGYWJyaWNIdWJfUEksIGJhc2VzKSA6OlxuICAgIE9iamVjdC5hc3NpZ24gQCBGYWJyaWNIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuXG4gICAgICBfcGFyc2VDb25uZWN0VVJMKGNvbm5fdXJsKSA6OlxuICAgICAgICByZXR1cm4gbmV3IFVSTChjb25uX3VybClcblxuICAgICAgX2luaXRfcm91dGVyKCkgOjpcbiAgICAgICAgY29uc3QgaWRfc2VsZiA9IHJhbmRvbV9pZF9zZWxmKClcbiAgICAgICAgY29uc3Qgcm91dGVyID0gbmV3IGJhc2VzLlJvdXRlcihpZF9zZWxmKVxuICAgICAgICByb3V0ZXIuYWxsb3dVbnZlcmlmaWVkUm91dGVzID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcm91dGVyXG5cbmZ1bmN0aW9uIHJhbmRvbV9pZF9zZWxmKCkgOjpcbiAgcmV0dXJuIHJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKClcbiJdLCJuYW1lcyI6WyJiYXNpY19yb3V0ZXJfcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJyYW5kb21faWRfc2VsZiIsIl9yYW5kb21faWRfc2VsZiIsIm9yZGVyIiwic3ViY2xhc3MiLCJGYWJyaWNIdWJfUEkiLCJiYXNlcyIsImFzc2lnbiIsInByb3RvdHlwZSIsImNyZWF0ZVBhY2tldFBhcnNlciIsImlkX3NlbGYiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJhbGxvd1VudmVyaWZpZWRSb3V0ZXMiLCJNYXRoIiwicmFuZG9tIiwiYnJvd3Nlcl9yb3V0ZXJfcGx1Z2luIiwidWEiLCJJbnQzMkFycmF5IiwiZHYiLCJEYXRhVmlldyIsImJ1ZmZlciIsIndpbmRvdyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImdldEludDMyIiwibm9kZWpzX3JvdXRlcl9wbHVnaW4iLCJjb25uX3VybCIsIlVSTCIsInJhbmRvbUJ5dGVzIiwicmVhZEludDMyTEUiXSwibWFwcGluZ3MiOiI7Ozs7QUFFZSxTQUFTQSxtQkFBVCxDQUE2QkMsaUJBQWUsRUFBNUMsRUFBZ0Q7UUFDdkRDLGlCQUFpQkQsZUFBZUMsY0FBZixJQUFpQ0MsZUFBeEQ7U0FDUyxFQUFDQyxPQUFPLENBQUMsQ0FBVCxFQUFZQyxTQUFTQyxZQUFULEVBQXVCQyxLQUF2QixFQUE4QjthQUMxQ0MsTUFBUCxDQUFnQkYsYUFBYUcsU0FBN0IsRUFBMEM7c0JBQzFCQyxtQkFBcUJULGNBQXJCLENBRDBCOzt1QkFHekI7Z0JBQ1BVLFVBQVVULGdCQUFoQjtnQkFDTVUsU0FBUyxJQUFJTCxNQUFNTSxNQUFWLENBQWlCRixPQUFqQixDQUFmO2lCQUNPRyxxQkFBUCxHQUErQixJQUEvQjtpQkFDT0YsTUFBUDtTQVBzQyxFQUExQztLQURPLEVBQVQ7OztBQVVGLFNBQVNULGVBQVQsR0FBMkI7U0FDbEIsSUFBSVksS0FBS0MsTUFBTCxLQUFnQixVQUEzQjs7O0FDYmEsU0FBU0MscUJBQVQsQ0FBK0JoQixpQkFBZSxFQUE5QyxFQUFrRDtTQUN0RCxFQUFDRyxPQUFPLENBQUMsQ0FBVCxFQUFZQyxTQUFTQyxZQUFULEVBQXVCQyxLQUF2QixFQUE4QjthQUMxQ0MsTUFBUCxDQUFnQkYsYUFBYUcsU0FBN0IsRUFBMEM7c0JBQzFCQywyQkFBcUJULGNBQXJCLENBRDBCOzt1QkFHekI7Z0JBQ1BVLFVBQVVULGdCQUFoQjtnQkFDTVUsU0FBUyxJQUFJTCxNQUFNTSxNQUFWLENBQWlCRixPQUFqQixDQUFmO2lCQUNPRyxxQkFBUCxHQUErQixJQUEvQjtpQkFDT0YsTUFBUDtTQVBzQyxFQUExQztLQURPLEVBQVQ7OztBQVVGLFNBQVNWLGNBQVQsR0FBMEI7UUFDbEJnQixLQUFLLElBQUlDLFVBQUosQ0FBZSxDQUFmLENBQVg7UUFBOEJDLEtBQUssSUFBSUMsUUFBSixDQUFhSCxHQUFHSSxNQUFoQixDQUFuQztNQUNHLGdCQUFnQixPQUFPQyxNQUExQixFQUFtQztXQUMxQkMsTUFBUCxDQUFjQyxlQUFkLENBQThCUCxFQUE5QjtHQURGLE1BRUs7T0FDQSxDQUFILElBQVEsYUFBYUgsS0FBS0MsTUFBTCxFQUFyQjs7U0FDS0ksR0FBR00sUUFBSCxDQUFZLENBQVosRUFBZSxJQUFmLENBQVA7OztBQ2ZhLFNBQVNDLG9CQUFULENBQThCMUIsaUJBQWUsRUFBN0MsRUFBaUQ7U0FDckQsRUFBQ0csT0FBTyxDQUFDLENBQVQsRUFBWUMsU0FBU0MsWUFBVCxFQUF1QkMsS0FBdkIsRUFBOEI7YUFDMUNDLE1BQVAsQ0FBZ0JGLGFBQWFHLFNBQTdCLEVBQTBDO3NCQUMxQkMseUJBQXFCVCxjQUFyQixDQUQwQjs7eUJBR3ZCMkIsUUFBakIsRUFBMkI7aUJBQ2xCLElBQUlDLEdBQUosQ0FBUUQsUUFBUixDQUFQO1NBSnNDOzt1QkFNekI7Z0JBQ1BqQixVQUFVVCxrQkFBaEI7Z0JBQ01VLFNBQVMsSUFBSUwsTUFBTU0sTUFBVixDQUFpQkYsT0FBakIsQ0FBZjtpQkFDT0cscUJBQVAsR0FBK0IsSUFBL0I7aUJBQ09GLE1BQVA7U0FWc0MsRUFBMUM7S0FETyxFQUFUOzs7QUFhRixTQUFTVixnQkFBVCxHQUEwQjtTQUNqQjRCLFlBQVksQ0FBWixFQUFlQyxXQUFmLEVBQVA7Ozs7OzsifQ==
