import createPacketParser, { createBufferPacketParser, createDataViewPacketParser } from 'msg-fabric-packet-stream';
import { URL } from 'url';
import { randomBytes } from 'crypto';

function basic_router_plugin(plugin_options = {}) {
  const random_id_self = plugin_options.random_id_self || _random_id_self;
  return { subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function _random_id_self() {
  return 0 | Math.random() * 0xffffffff;
}

function browser_router_plugin(plugin_options = {}) {
  return { subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createDataViewPacketParser(plugin_options),

        _init_router() {
          const id_self = random_id_self();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self() {
  const ua = new Int32Array(1),
        dv = new DataView(ua.buffer);
  if ('undefined' !== typeof window) {
    window.crypto.getRandomValues(ua);
  } else {
    ua[0] = 0xffffffff * Math.random();
  }
  return dv.getInt32(0, true);
}

function nodejs_router_plugin(plugin_options = {}) {
  return { subclass(FabricHub_PI, bases) {
      Object.assign(FabricHub_PI.prototype, {
        packetParser: createBufferPacketParser(plugin_options),

        _parseConnectURL(conn_url) {
          return new URL(conn_url);
        },

        _init_router() {
          const id_self = random_id_self$1();
          const router = new bases.Router(id_self);
          router.allowUnverifiedRoutes = true;
          return router;
        } });
    } };
}

function random_id_self$1() {
  return randomBytes(4).readInt32LE();
}

export { basic_router_plugin as basic, browser_router_plugin as browser, nodejs_router_plugin as node };
export default nodejs_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvYmFzaWMuanN5IiwiLi4vY29kZS9wbHVnaW5zL3JvdXRlci9icm93c2VyLmpzeSIsIi4uL2NvZGUvcGx1Z2lucy9yb3V0ZXIvbm9kZS5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVBhY2tldFBhcnNlciBmcm9tICdtc2ctZmFicmljLXBhY2tldC1zdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhc2ljX3JvdXRlcl9wbHVnaW4ocGx1Z2luX29wdGlvbnM9e30pIDo6XG4gIGNvbnN0IHJhbmRvbV9pZF9zZWxmID0gcGx1Z2luX29wdGlvbnMucmFuZG9tX2lkX3NlbGYgfHwgX3JhbmRvbV9pZF9zZWxmXG4gIHJldHVybiBAOiBzdWJjbGFzcyhGYWJyaWNIdWJfUEksIGJhc2VzKSA6OlxuICAgIE9iamVjdC5hc3NpZ24gQCBGYWJyaWNIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuXG4gICAgICBfaW5pdF9yb3V0ZXIoKSA6OlxuICAgICAgICBjb25zdCBpZF9zZWxmID0gcmFuZG9tX2lkX3NlbGYoKVxuICAgICAgICBjb25zdCByb3V0ZXIgPSBuZXcgYmFzZXMuUm91dGVyKGlkX3NlbGYpXG4gICAgICAgIHJvdXRlci5hbGxvd1VudmVyaWZpZWRSb3V0ZXMgPSB0cnVlXG4gICAgICAgIHJldHVybiByb3V0ZXJcblxuZnVuY3Rpb24gX3JhbmRvbV9pZF9zZWxmKCkgOjpcbiAgcmV0dXJuIDAgfCBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZlxuIiwiaW1wb3J0IHtjcmVhdGVEYXRhVmlld1BhY2tldFBhcnNlciBhcyBjcmVhdGVQYWNrZXRQYXJzZXJ9IGZyb20gJ21zZy1mYWJyaWMtcGFja2V0LXN0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnJvd3Nlcl9yb3V0ZXJfcGx1Z2luKHBsdWdpbl9vcHRpb25zPXt9KSA6OlxuICByZXR1cm4gQDogc3ViY2xhc3MoRmFicmljSHViX1BJLCBiYXNlcykgOjpcbiAgICBPYmplY3QuYXNzaWduIEAgRmFicmljSHViX1BJLnByb3RvdHlwZSwgQDpcbiAgICAgIHBhY2tldFBhcnNlcjogY3JlYXRlUGFja2V0UGFyc2VyIEAgcGx1Z2luX29wdGlvbnNcblxuICAgICAgX2luaXRfcm91dGVyKCkgOjpcbiAgICAgICAgY29uc3QgaWRfc2VsZiA9IHJhbmRvbV9pZF9zZWxmKClcbiAgICAgICAgY29uc3Qgcm91dGVyID0gbmV3IGJhc2VzLlJvdXRlcihpZF9zZWxmKVxuICAgICAgICByb3V0ZXIuYWxsb3dVbnZlcmlmaWVkUm91dGVzID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcm91dGVyXG5cbmZ1bmN0aW9uIHJhbmRvbV9pZF9zZWxmKCkgOjpcbiAgY29uc3QgdWEgPSBuZXcgSW50MzJBcnJheSgxKSwgZHYgPSBuZXcgRGF0YVZpZXcodWEuYnVmZmVyKVxuICBpZiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHdpbmRvdyA6OlxuICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVhKVxuICBlbHNlIDo6XG4gICAgdWFbMF0gPSAweGZmZmZmZmZmICogTWF0aC5yYW5kb20oKVxuICByZXR1cm4gZHYuZ2V0SW50MzIoMCwgdHJ1ZSlcbiIsImltcG9ydCB7VVJMfSBmcm9tICd1cmwnXG5pbXBvcnQge3JhbmRvbUJ5dGVzfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQge2NyZWF0ZUJ1ZmZlclBhY2tldFBhcnNlciBhcyBjcmVhdGVQYWNrZXRQYXJzZXJ9IGZyb20gJ21zZy1mYWJyaWMtcGFja2V0LXN0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9kZWpzX3JvdXRlcl9wbHVnaW4ocGx1Z2luX29wdGlvbnM9e30pIDo6XG4gIHJldHVybiBAOiBzdWJjbGFzcyhGYWJyaWNIdWJfUEksIGJhc2VzKSA6OlxuICAgIE9iamVjdC5hc3NpZ24gQCBGYWJyaWNIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuXG4gICAgICBfcGFyc2VDb25uZWN0VVJMKGNvbm5fdXJsKSA6OlxuICAgICAgICByZXR1cm4gbmV3IFVSTChjb25uX3VybClcblxuICAgICAgX2luaXRfcm91dGVyKCkgOjpcbiAgICAgICAgY29uc3QgaWRfc2VsZiA9IHJhbmRvbV9pZF9zZWxmKClcbiAgICAgICAgY29uc3Qgcm91dGVyID0gbmV3IGJhc2VzLlJvdXRlcihpZF9zZWxmKVxuICAgICAgICByb3V0ZXIuYWxsb3dVbnZlcmlmaWVkUm91dGVzID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcm91dGVyXG5cbmZ1bmN0aW9uIHJhbmRvbV9pZF9zZWxmKCkgOjpcbiAgcmV0dXJuIHJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKClcbiJdLCJuYW1lcyI6WyJiYXNpY19yb3V0ZXJfcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJyYW5kb21faWRfc2VsZiIsIl9yYW5kb21faWRfc2VsZiIsInN1YmNsYXNzIiwiRmFicmljSHViX1BJIiwiYmFzZXMiLCJhc3NpZ24iLCJwcm90b3R5cGUiLCJjcmVhdGVQYWNrZXRQYXJzZXIiLCJpZF9zZWxmIiwicm91dGVyIiwiUm91dGVyIiwiYWxsb3dVbnZlcmlmaWVkUm91dGVzIiwiTWF0aCIsInJhbmRvbSIsImJyb3dzZXJfcm91dGVyX3BsdWdpbiIsInVhIiwiSW50MzJBcnJheSIsImR2IiwiRGF0YVZpZXciLCJidWZmZXIiLCJ3aW5kb3ciLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJnZXRJbnQzMiIsIm5vZGVqc19yb3V0ZXJfcGx1Z2luIiwiY29ubl91cmwiLCJVUkwiLCJyYW5kb21CeXRlcyIsInJlYWRJbnQzMkxFIl0sIm1hcHBpbmdzIjoiOzs7O0FBRWUsU0FBU0EsbUJBQVQsQ0FBNkJDLGlCQUFlLEVBQTVDLEVBQWdEO1FBQ3ZEQyxpQkFBaUJELGVBQWVDLGNBQWYsSUFBaUNDLGVBQXhEO1NBQ1MsRUFBQ0MsU0FBU0MsWUFBVCxFQUF1QkMsS0FBdkIsRUFBOEI7YUFDL0JDLE1BQVAsQ0FBZ0JGLGFBQWFHLFNBQTdCLEVBQTBDO3NCQUMxQkMsbUJBQXFCUixjQUFyQixDQUQwQjs7dUJBR3pCO2dCQUNQUyxVQUFVUixnQkFBaEI7Z0JBQ01TLFNBQVMsSUFBSUwsTUFBTU0sTUFBVixDQUFpQkYsT0FBakIsQ0FBZjtpQkFDT0cscUJBQVAsR0FBK0IsSUFBL0I7aUJBQ09GLE1BQVA7U0FQc0MsRUFBMUM7S0FETyxFQUFUOzs7QUFVRixTQUFTUixlQUFULEdBQTJCO1NBQ2xCLElBQUlXLEtBQUtDLE1BQUwsS0FBZ0IsVUFBM0I7OztBQ2JhLFNBQVNDLHFCQUFULENBQStCZixpQkFBZSxFQUE5QyxFQUFrRDtTQUN0RCxFQUFDRyxTQUFTQyxZQUFULEVBQXVCQyxLQUF2QixFQUE4QjthQUMvQkMsTUFBUCxDQUFnQkYsYUFBYUcsU0FBN0IsRUFBMEM7c0JBQzFCQywyQkFBcUJSLGNBQXJCLENBRDBCOzt1QkFHekI7Z0JBQ1BTLFVBQVVSLGdCQUFoQjtnQkFDTVMsU0FBUyxJQUFJTCxNQUFNTSxNQUFWLENBQWlCRixPQUFqQixDQUFmO2lCQUNPRyxxQkFBUCxHQUErQixJQUEvQjtpQkFDT0YsTUFBUDtTQVBzQyxFQUExQztLQURPLEVBQVQ7OztBQVVGLFNBQVNULGNBQVQsR0FBMEI7UUFDbEJlLEtBQUssSUFBSUMsVUFBSixDQUFlLENBQWYsQ0FBWDtRQUE4QkMsS0FBSyxJQUFJQyxRQUFKLENBQWFILEdBQUdJLE1BQWhCLENBQW5DO01BQ0csZ0JBQWdCLE9BQU9DLE1BQTFCLEVBQW1DO1dBQzFCQyxNQUFQLENBQWNDLGVBQWQsQ0FBOEJQLEVBQTlCO0dBREYsTUFFSztPQUNBLENBQUgsSUFBUSxhQUFhSCxLQUFLQyxNQUFMLEVBQXJCOztTQUNLSSxHQUFHTSxRQUFILENBQVksQ0FBWixFQUFlLElBQWYsQ0FBUDs7O0FDZmEsU0FBU0Msb0JBQVQsQ0FBOEJ6QixpQkFBZSxFQUE3QyxFQUFpRDtTQUNyRCxFQUFDRyxTQUFTQyxZQUFULEVBQXVCQyxLQUF2QixFQUE4QjthQUMvQkMsTUFBUCxDQUFnQkYsYUFBYUcsU0FBN0IsRUFBMEM7c0JBQzFCQyx5QkFBcUJSLGNBQXJCLENBRDBCOzt5QkFHdkIwQixRQUFqQixFQUEyQjtpQkFDbEIsSUFBSUMsR0FBSixDQUFRRCxRQUFSLENBQVA7U0FKc0M7O3VCQU16QjtnQkFDUGpCLFVBQVVSLGtCQUFoQjtnQkFDTVMsU0FBUyxJQUFJTCxNQUFNTSxNQUFWLENBQWlCRixPQUFqQixDQUFmO2lCQUNPRyxxQkFBUCxHQUErQixJQUEvQjtpQkFDT0YsTUFBUDtTQVZzQyxFQUExQztLQURPLEVBQVQ7OztBQWFGLFNBQVNULGdCQUFULEdBQTBCO1NBQ2pCMkIsWUFBWSxDQUFaLEVBQWVDLFdBQWYsRUFBUDs7Ozs7OyJ9
