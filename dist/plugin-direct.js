'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var stream = require('stream');

function bindStreamChannel$1(rstream, wstream, api_channel, props) {
  const channel = api_channel.bindChannel(sendPktRaw, props);
  connectPacketStream(rstream, channel, true);
  return channel;

  function sendPktRaw(pkt) {
    if (!Buffer.isBuffer(pkt)) {
      if (pkt._raw_) {
        pkt = Buffer.from(pkt._raw_);
      } else if (pkt.byteLength) {
        pkt = Buffer.from(pkt);
      } else {
        throw new TypeError(`sendPktRaw expected 'pkt' as a Buffer or an object with a '_raw_' Buffer`);
      }
    }

    if (null === pkt) {
      return void wstream.end();
    }
    return void wstream.write(pkt);
  }
}

function connectPacketStream(rstream, channel, endStreamOnShutdown) {
  const shutdown = new Promise(lifecycle);
  return Object.defineProperty(channel, 'shutdown', { value: shutdown });

  function lifecycle(resolve, reject) {
    let pktDispatch = channel.bindDispatchPackets();

    rstream.on('error', shutdown);
    rstream.on('close', shutdown);
    rstream.on('data', function (data) {
      try {
        pktDispatch(data);
      } catch (err) {
        return shutdown(err);
      }
    });

    function shutdown(err) {
      if (undefined === pktDispatch) {
        return;
      }
      pktDispatch = undefined;
      if (endStreamOnShutdown) {
        rstream.end();
      }

      err ? reject(err) : resolve();
    }
  }
}

function stream_plugin(plugin_options = {}) {
  return function (hub) {
    return hub.direct = Object.assign(connect, {
      connect, connectDirect, createDirectChannel });

    function connect(peer) {
      return connectDirect(peer)[0];
    }

    function connectDirect(peer) {
      if (peer.direct && 'function' === typeof peer.direct.createDirectChannel) {
        peer = peer.direct;
      }

      const streams = [new stream.PassThrough(), new stream.PassThrough()];
      return [createDirectChannel(streams[0], streams[1]), peer.createDirectChannel(streams[1], streams[0])];
    }

    function createDirectChannel(rstream, wstream) {
      const channel = bindStreamChannel$1(rstream, wstream, hub._api_channel);

      channel.sendRoutingHandshake();
      return channel;
    }
  };
}

exports['default'] = stream_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWRpcmVjdC5qcyIsInNvdXJjZXMiOlsiLi4vY29kZS9wbHVnaW5zL25ldC9fc3RyZWFtX2NvbW1vbi5qc3kiLCIuLi9jb2RlL3BsdWdpbnMvbmV0L2RpcmVjdC5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgYmluZFN0cmVhbUNoYW5uZWxcbmV4cG9ydCBmdW5jdGlvbiBiaW5kU3RyZWFtQ2hhbm5lbChyc3RyZWFtLCB3c3RyZWFtLCBhcGlfY2hhbm5lbCwgcHJvcHMpIDo6XG4gIGNvbnN0IGNoYW5uZWwgPSBhcGlfY2hhbm5lbC5iaW5kQ2hhbm5lbCBAIHNlbmRQa3RSYXcsIHByb3BzXG4gIGNvbm5lY3RQYWNrZXRTdHJlYW0gQCByc3RyZWFtLCBjaGFubmVsLCB0cnVlXG4gIHJldHVybiBjaGFubmVsXG5cbiAgZnVuY3Rpb24gc2VuZFBrdFJhdyhwa3QpIDo6XG4gICAgaWYgISBCdWZmZXIuaXNCdWZmZXIgQCBwa3QgOjpcbiAgICAgIGlmIHBrdC5fcmF3XyA6OlxuICAgICAgICBwa3QgPSBCdWZmZXIuZnJvbSBAIHBrdC5fcmF3X1xuICAgICAgZWxzZSBpZiBwa3QuYnl0ZUxlbmd0aCA6OlxuICAgICAgICBwa3QgPSBCdWZmZXIuZnJvbSBAIHBrdFxuICAgICAgZWxzZSA6OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yIEAgYHNlbmRQa3RSYXcgZXhwZWN0ZWQgJ3BrdCcgYXMgYSBCdWZmZXIgb3IgYW4gb2JqZWN0IHdpdGggYSAnX3Jhd18nIEJ1ZmZlcmBcblxuICAgIGlmIG51bGwgPT09IHBrdCA6OlxuICAgICAgcmV0dXJuIHZvaWQgd3N0cmVhbS5lbmQoKVxuICAgIHJldHVybiB2b2lkIHdzdHJlYW0ud3JpdGUocGt0KVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0UGFja2V0U3RyZWFtKHJzdHJlYW0sIGNoYW5uZWwsIGVuZFN0cmVhbU9uU2h1dGRvd24pIDo6XG4gIGNvbnN0IHNodXRkb3duID0gbmV3IFByb21pc2UgQCBsaWZlY3ljbGVcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBAIGNoYW5uZWwsICdzaHV0ZG93bicsIEA6IHZhbHVlOiBzaHV0ZG93blxuICBcbiAgZnVuY3Rpb24gbGlmZWN5Y2xlKHJlc29sdmUsIHJlamVjdCkgOjpcbiAgICBsZXQgcGt0RGlzcGF0Y2ggPSBjaGFubmVsLmJpbmREaXNwYXRjaFBhY2tldHMoKVxuXG4gICAgcnN0cmVhbS5vbiBAICdlcnJvcicsIHNodXRkb3duXG4gICAgcnN0cmVhbS5vbiBAICdjbG9zZScsIHNodXRkb3duXG4gICAgcnN0cmVhbS5vbiBAICdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIDo6XG4gICAgICB0cnkgOjogcGt0RGlzcGF0Y2goZGF0YSlcbiAgICAgIGNhdGNoIGVyciA6OlxuICAgICAgICByZXR1cm4gc2h1dGRvd24oZXJyKVxuXG4gICAgZnVuY3Rpb24gc2h1dGRvd24oZXJyKSA6OlxuICAgICAgaWYgdW5kZWZpbmVkID09PSBwa3REaXNwYXRjaCA6OiByZXR1cm5cbiAgICAgIHBrdERpc3BhdGNoID0gdW5kZWZpbmVkXG4gICAgICBpZiBlbmRTdHJlYW1PblNodXRkb3duIDo6XG4gICAgICAgIHJzdHJlYW0uZW5kKClcblxuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKClcblxuIiwiaW1wb3J0IHtQYXNzVGhyb3VnaH0gZnJvbSAnc3RyZWFtJ1xuaW1wb3J0IGJpbmRTdHJlYW1DaGFubmVsIGZyb20gJy4vX3N0cmVhbV9jb21tb24uanN5J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHJlYW1fcGx1Z2luKHBsdWdpbl9vcHRpb25zPXt9KSA6OlxuICByZXR1cm4gZnVuY3Rpb24oaHViKSA6OlxuICAgIHJldHVybiBodWIuZGlyZWN0ID0gT2JqZWN0LmFzc2lnbiBAIGNvbm5lY3QsIEB7fVxuICAgICAgY29ubmVjdCwgY29ubmVjdERpcmVjdCwgY3JlYXRlRGlyZWN0Q2hhbm5lbFxuXG4gICAgZnVuY3Rpb24gY29ubmVjdChwZWVyKSA6OlxuICAgICAgcmV0dXJuIGNvbm5lY3REaXJlY3QocGVlcilbMF1cblxuICAgIGZ1bmN0aW9uIGNvbm5lY3REaXJlY3QocGVlcikgOjpcbiAgICAgIGlmIHBlZXIuZGlyZWN0ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBwZWVyLmRpcmVjdC5jcmVhdGVEaXJlY3RDaGFubmVsIDo6XG4gICAgICAgIHBlZXIgPSBwZWVyLmRpcmVjdFxuXG4gICAgICBjb25zdCBzdHJlYW1zID0gQFtdIG5ldyBQYXNzVGhyb3VnaCgpLCBuZXcgUGFzc1Rocm91Z2goKVxuICAgICAgcmV0dXJuIEBbXVxuICAgICAgICBjcmVhdGVEaXJlY3RDaGFubmVsIEAgc3RyZWFtc1swXSwgc3RyZWFtc1sxXVxuICAgICAgICBwZWVyLmNyZWF0ZURpcmVjdENoYW5uZWwgQCBzdHJlYW1zWzFdLCBzdHJlYW1zWzBdXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEaXJlY3RDaGFubmVsKHJzdHJlYW0sIHdzdHJlYW0pIDo6XG4gICAgICBjb25zdCBjaGFubmVsID0gYmluZFN0cmVhbUNoYW5uZWwgQFxuICAgICAgICByc3RyZWFtLCB3c3RyZWFtLCBodWIuX2FwaV9jaGFubmVsXG5cbiAgICAgIGNoYW5uZWwuc2VuZFJvdXRpbmdIYW5kc2hha2UoKVxuICAgICAgcmV0dXJuIGNoYW5uZWxcbiJdLCJuYW1lcyI6WyJiaW5kU3RyZWFtQ2hhbm5lbCIsInJzdHJlYW0iLCJ3c3RyZWFtIiwiYXBpX2NoYW5uZWwiLCJwcm9wcyIsImNoYW5uZWwiLCJiaW5kQ2hhbm5lbCIsInNlbmRQa3RSYXciLCJwa3QiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIl9yYXdfIiwiZnJvbSIsImJ5dGVMZW5ndGgiLCJUeXBlRXJyb3IiLCJlbmQiLCJ3cml0ZSIsImNvbm5lY3RQYWNrZXRTdHJlYW0iLCJlbmRTdHJlYW1PblNodXRkb3duIiwic2h1dGRvd24iLCJQcm9taXNlIiwibGlmZWN5Y2xlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJwa3REaXNwYXRjaCIsImJpbmREaXNwYXRjaFBhY2tldHMiLCJvbiIsImRhdGEiLCJlcnIiLCJ1bmRlZmluZWQiLCJzdHJlYW1fcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJodWIiLCJkaXJlY3QiLCJhc3NpZ24iLCJjb25uZWN0IiwiY29ubmVjdERpcmVjdCIsImNyZWF0ZURpcmVjdENoYW5uZWwiLCJwZWVyIiwic3RyZWFtcyIsIlBhc3NUaHJvdWdoIiwiX2FwaV9jaGFubmVsIiwic2VuZFJvdXRpbmdIYW5kc2hha2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNPLFNBQVNBLG1CQUFULENBQTJCQyxPQUEzQixFQUFvQ0MsT0FBcEMsRUFBNkNDLFdBQTdDLEVBQTBEQyxLQUExRCxFQUFpRTtRQUNoRUMsVUFBVUYsWUFBWUcsV0FBWixDQUEwQkMsVUFBMUIsRUFBc0NILEtBQXRDLENBQWhCO3NCQUNzQkgsT0FBdEIsRUFBK0JJLE9BQS9CLEVBQXdDLElBQXhDO1NBQ09BLE9BQVA7O1dBRVNFLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO1FBQ3BCLENBQUVDLE9BQU9DLFFBQVAsQ0FBa0JGLEdBQWxCLENBQUwsRUFBNkI7VUFDeEJBLElBQUlHLEtBQVAsRUFBZTtjQUNQRixPQUFPRyxJQUFQLENBQWNKLElBQUlHLEtBQWxCLENBQU47T0FERixNQUVLLElBQUdILElBQUlLLFVBQVAsRUFBb0I7Y0FDakJKLE9BQU9HLElBQVAsQ0FBY0osR0FBZCxDQUFOO09BREcsTUFFQTtjQUNHLElBQUlNLFNBQUosQ0FBaUIsMEVBQWpCLENBQU47Ozs7UUFFRCxTQUFTTixHQUFaLEVBQWtCO2FBQ1QsS0FBS04sUUFBUWEsR0FBUixFQUFaOztXQUNLLEtBQUtiLFFBQVFjLEtBQVIsQ0FBY1IsR0FBZCxDQUFaOzs7O0FBR0osQUFBTyxTQUFTUyxtQkFBVCxDQUE2QmhCLE9BQTdCLEVBQXNDSSxPQUF0QyxFQUErQ2EsbUJBQS9DLEVBQW9FO1FBQ25FQyxXQUFXLElBQUlDLE9BQUosQ0FBY0MsU0FBZCxDQUFqQjtTQUNPQyxPQUFPQyxjQUFQLENBQXdCbEIsT0FBeEIsRUFBaUMsVUFBakMsRUFBK0MsRUFBQ21CLE9BQU9MLFFBQVIsRUFBL0MsQ0FBUDs7V0FFU0UsU0FBVCxDQUFtQkksT0FBbkIsRUFBNEJDLE1BQTVCLEVBQW9DO1FBQzlCQyxjQUFjdEIsUUFBUXVCLG1CQUFSLEVBQWxCOztZQUVRQyxFQUFSLENBQWEsT0FBYixFQUFzQlYsUUFBdEI7WUFDUVUsRUFBUixDQUFhLE9BQWIsRUFBc0JWLFFBQXRCO1lBQ1FVLEVBQVIsQ0FBYSxNQUFiLEVBQXFCLFVBQVVDLElBQVYsRUFBZ0I7VUFDL0I7b0JBQWVBLElBQVo7T0FBUCxDQUNBLE9BQU1DLEdBQU4sRUFBWTtlQUNIWixTQUFTWSxHQUFULENBQVA7O0tBSEo7O2FBS1NaLFFBQVQsQ0FBa0JZLEdBQWxCLEVBQXVCO1VBQ2xCQyxjQUFjTCxXQUFqQixFQUErQjs7O29CQUNqQkssU0FBZDtVQUNHZCxtQkFBSCxFQUF5QjtnQkFDZkgsR0FBUjs7O1lBRUlXLE9BQU9LLEdBQVAsQ0FBTixHQUFvQk4sU0FBcEI7Ozs7O0FDckNTLFNBQVNRLGFBQVQsQ0FBdUJDLGlCQUFlLEVBQXRDLEVBQTBDO1NBQ2hELFVBQVNDLEdBQVQsRUFBYztXQUNaQSxJQUFJQyxNQUFKLEdBQWFkLE9BQU9lLE1BQVAsQ0FBZ0JDLE9BQWhCLEVBQXlCO2FBQUEsRUFDbENDLGFBRGtDLEVBQ25CQyxtQkFEbUIsRUFBekIsQ0FBcEI7O2FBR1NGLE9BQVQsQ0FBaUJHLElBQWpCLEVBQXVCO2FBQ2RGLGNBQWNFLElBQWQsRUFBb0IsQ0FBcEIsQ0FBUDs7O2FBRU9GLGFBQVQsQ0FBdUJFLElBQXZCLEVBQTZCO1VBQ3hCQSxLQUFLTCxNQUFMLElBQWUsZUFBZSxPQUFPSyxLQUFLTCxNQUFMLENBQVlJLG1CQUFwRCxFQUEwRTtlQUNqRUMsS0FBS0wsTUFBWjs7O1lBRUlNLFVBQVUsQ0FBSSxJQUFJQyxrQkFBSixFQUFKLEVBQXVCLElBQUlBLGtCQUFKLEVBQXZCLENBQWhCO2FBQ08sQ0FDTEgsb0JBQXNCRSxRQUFRLENBQVIsQ0FBdEIsRUFBa0NBLFFBQVEsQ0FBUixDQUFsQyxDQURLLEVBRUxELEtBQUtELG1CQUFMLENBQTJCRSxRQUFRLENBQVIsQ0FBM0IsRUFBdUNBLFFBQVEsQ0FBUixDQUF2QyxDQUZLLENBQVA7OzthQUlPRixtQkFBVCxDQUE2QnZDLE9BQTdCLEVBQXNDQyxPQUF0QyxFQUErQztZQUN2Q0csVUFBVUwsb0JBQ2RDLE9BRGMsRUFDTEMsT0FESyxFQUNJaUMsSUFBSVMsWUFEUixDQUFoQjs7Y0FHUUMsb0JBQVI7YUFDT3hDLE9BQVA7O0dBckJKOzs7OzsifQ==
