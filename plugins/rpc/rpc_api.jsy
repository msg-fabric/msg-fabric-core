
export function bind_rpc_api_dispatch(send, base_rpc_options) ::
  const ident = v => v
  base_rpc_options = Object.assign @
    @{} prefix: 'm$', dnu: '__dnu__'
        extend_api: ident
        params: false
        parallel: false

    base_rpc_options

  return @{} api_binder

  function api_binder(api) ::
    const rpc_options = Object.assign @ {__proto__: base_rpc_options}, api.rpc_options
    const { prefix, dnu, extend_api } = rpc_options
    const bind_params = as_bind_params @ rpc_options.params

    rpc_binder.parallel = rpc_options.parallel
    return rpc_binder

    function rpc_binder(call, pkt) ::
      // call: @[] '!', id_reply, method, 
      if ! Array.isArray(call) || '!' !== call[0] ::
        return null

      const method = call[2]
      if 'string' !== typeof method ::
        return null
      const valid = method.startsWith(prefix)

      const call_ctx = @{} pkt, call, method, valid, send
      const _api = extend_api(api, call_ctx)

      let fn, call_params
      if valid :: fn = _api[method]

      if undefined === fn ::
        const fn_dnu = _api[dnu]
        if undefined === fn_dnu ::
          return false
        fn = @=> fn_dnu.call @ _api, method, call_ctx

      else call_params = bind_params @ call.slice(3), call_ctx

      const id_reply = call[1]
      return id_reply
        ? @=>> ::
            const body = await fn.apply @ _api, call_params
            await call_ctx.send @: 0: id_reply[0], 1: id_reply[1], body

        : @=> fn.apply @ _api, call_params


  function as_bind_params(key) ::
    if false === key :: return ident
    if 'function' === typeof key :: return key

    if true === key ::
      return (params, {pkt}) => @
        params.unshift @ pkt
        params

    if 'string' === typeof key ::
      return (params, ns) => @
        params.unshift @ ns[key]
        params

    throw TypeError

