import {rx_rpc} from './rpc_api.jsy'

export const rpc_client = /* #__PURE__ */
  Object.create @
    @{}
      with(kw) ::
        return @{} __proto__: this, ...kw

      to(id, meta=this.meta, kw) ::
        return this.with @: id, meta, ...kw

      rpc_post(method, ...args) ::
        return this._rpc_v(method, null, args)

      rpc_query(method, ...args) ::
        let r = this.tgt_router.addReply(this.ms_timeout)
        let p = r.response()
        this._rpc_v(method, r.id, args)
        return p

      _rpc_v(method, id_reply, args_v) ::
        let {id, meta} = this
        if ! id :: throw new Error('Invalid RPC destination')

        let body = @[] '!', id_reply, method, ...args_v
        return this.tgt_router.send @ id, meta, body

    @{}
      post: _wm_rpc_pxy('rpc_post')
      query: _wm_rpc_pxy('rpc_query')


function _wm_rpc_pxy(name) ::
  // Object attribute for weak-ref caching of proxies and methods
  let wm = new WeakMap()
  return @{}
    get() :: // object attribute getter
      let r = wm.get(this)
      if undefined === r ::
        // weakly cache proxy
        wm.set(this, r=_rpc_pxy({}, this, this[name]))
      return r

  function _rpc_pxy(obj, host, wrap_fn) ::
    return new Proxy @ obj, @{}
      get(obj, method) :: // proxy attribute getter
        let r = obj[method]
        if undefined === r && rx_rpc.test(method) ::
          // cache bound method
          obj[method] = r = wrap_fn.bind(host, method)
        return r

