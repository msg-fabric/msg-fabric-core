import stream_common from './_stream_common.jsy'

export default function net_common(hub, plugin, protocol, asURL) ::
  var _common_
  if null == asURL ::
    const path_prefix = {'.':'/', '/':''}
    asURL = function () ::
      let {address, port, path} = this
      if address ::
        return `${protocol}://${address}:${port}`
      else if path ::
        const pre = path_prefix[path[0]] || '/./'
        return `${protocol}://${pre}${path}`
          

  const conn_info_base = @{} toString: asURL, asURL, protocol
  const sock_conn_info = sock => @:
    __proto__: conn_info_base
    address: sock.localAddress, port: sock.localPort
    remote: @{} __proto__: conn_info_base
      address: sock.remoteAddress, port: sock.remotePort

  hub.registerProtocols @ [protocol, `${protocol}:`],
    url => plugin.connect @ _common_.unpackConnectURL(url)


  Object.assign @ plugin, @{}
    with_url_options(options) ::
      // merges options onto this.url_options
      return plugin.url_options = Object.assign @
        {}, plugin.url_options, options


  // shared implementation between net/tcp and tls implementations
  return _common_ = @{} __proto__: stream_common(hub),
    createSocketChannel(sock, channel_id) ::
      sock.setNoDelay(true)
      const channel = this.createStreamChannel(sock, sock, channel_id || protocol)
      return Object.defineProperties @ channel, @{}
        conn_info: @{} enumerable: true, value() :: return sock_conn_info(sock)
        sock: @{} enumerable: true, get() :: return sock
            


    bindChannel(...args) ::
      const channel = this.createSocketChannel(...args)
      channel.init()
      return channel

    createClient(channel_id, _impl_) ::
      return new Promise @ (resolve, reject) => ::
        _impl_ @ function() ::
          const sock = this.setKeepAlive(true)
          const channel = _common_.bindChannel(sock, channel_id)
          resolve(channel)
        .on @ 'error', reject

    createServer(channel_id, onPeer, _impl_) ::
      const svr = _impl_ @ sock => ::
        sock = sock.unref().setKeepAlive(false)
        const channel = _common_.bindChannel(sock, channel_id)
        on_peer(channel)

      const on_peer = this.bindOnPeer(svr, onPeer)

      svr.conn_info = function (asPromise) ::
        const addr = svr.address()
        if null != addr ::
          const res = @{} __proto__: conn_info_base
          if 'string' === typeof addr ::
            res.path = addr
          else if addr.address ::
            res.address = addr.address
            res.port = addr.port
          return asPromise ? Promise.resolve(res) : res

        else if asPromise ::
          return new Promise @ (resolve, reject) => ::
            svr.once @ 'listening', @=> resolve @ svr.conn_info(false)
            svr.once @ 'error', reject

        else return null

      return svr

    bindOnPeer(svr, onPeer) ::
      if 'function' === typeof onPeer ::
        return onPeer
      return ! onPeer ? Boolean :
        channel => svr.emit @ onPeer, channel

    unpackConnectURL(conn_url) ::
      if 'string' === typeof conn_url.href ::
        conn_url = this.unpackURLParams(conn_url)

      const options = Object.assign @ {}, conn_url, plugin.url_options
      return plugin.on_url_connect
        ? plugin.on_url_connect(options, url)
        : options

    unpackURLParams(url) ::
      if 'string' !== typeof url.href :: return

      const {hostname:host, port, pathname: path} = url
      if host ::
        return @{} host, port
      else if path ::
        if path.startsWith('/.') ::
          path = path.slice(1)
        return @{} path

