export default function direct_plugin(plugin_options={}) ::
  const pi_name = plugin_options.name || 'direct'

  return hub => ::
    const _createRWChannel = hub._pkts_.bin_call.createChannel
    return hub[pi_name] = Object.assign @ connect, @{}
      connect, pair, connectDirectPair, connectDirectChannel

    function connect(peer) :: return connectDirectPair(peer)[0]
    function pair(peer) :: return Promise.all @ connectDirectPair(peer)

    function connectDirectPair(peer) ::
      if peer[pi_name] && 'function' === typeof peer[pi_name].connectDirectChannel ::
        peer = peer[pi_name]

      const [recv_self, chan_self] =
        connectDirectChannel @
          d_pkt => Promise.resolve([d_pkt]).then(recv_peer)

      const [recv_peer, chan_peer] =
        peer.connectDirectChannel @
          d_pkt => Promise.resolve([d_pkt]).then(recv_self)

      return @[] chan_self, chan_peer

    function connectDirectChannel(send, channel_id, no_hello) ::
      send_packed.channel_id = channel_id || 'direct'
      const [recv, channel] = _createRWChannel @ hub.router.dispatch, send_packed
      if ! no_hello ::
        channel.peer_info = Promise.resolve().then @=>
          hub.p2p.hello(channel)
      return @[] recv, Promise.resolve(channel)

      function send_packed(d_pkt) ::
        if null !== d_pkt :: send(d_pkt)
