import { PktJsonBase, PktDataBase, bind_binaryLenPacket } from '../common_binary.jsy'
import { decode_utf8, unpack_base64, packBody, concatBody } from './util.jsy'

export default function({}) ::

  const PktJson = @{} __proto__: PktJsonBase
    text() :: return this._body_.toString('utf-8')

  const PktData = @{} __proto__: PktDataBase
    text() :: return this._body_.toString('utf-8')
    base64() :: return this._body_.toString('base64')
    buffer() :: return this._body_


  return bind_binaryLenPacket @:
    decode_utf8, unpack_base64, packBody, packParts, concatBody
    PktJson, PktData


function packParts(hdr, body) ::
  return packLenPrefixBuffer @ hdr, packBody(body)

function packLenPrefixBuffer(hdr, body) ::
  hdr = Buffer.from(hdr)
  const len0 = (2 + hdr.byteLength ) | 0
  const len = (len0 + body.byteLength ) | 0

  if len > 0xffff || len < 4 ::
    throw new Error @ `Packet malformed (${len} b)`

  const buf = Buffer.alloc(len)
  buf.writeUInt16LE(len, 0)

  hdr.copy(buf, 2)

  if len0 !== len ::
    body.copy(buf, len0)
  return buf

