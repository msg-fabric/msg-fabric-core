import base_api from './base.jsy'
import msg_stream from './msg_stream.jsy'
import framing_api from './framing.jsy'
import send_anon_api from './send_anon.jsy'
import source_api from './source.jsy'
import send_from_api from './send_from.jsy'


const default_options = @{} msg_stream

export default function msgs_plugin(plugin_options) ::
  plugin_options = Object.assign @ {}, default_options, plugin_options

  return function (hub) ::
    const msgs = createMsgsPlugin(plugin_options)
    msgs.createMsgsPlugin = createMsgsPlugin
    return hub.msgs = msgs

    function createMsgsPlugin(options={}) ::
      const shared = base_api @ hub,
        Object.assign @ {}, plugin_options, options

      framing_api(shared, options.framing)

      if options.bind_msgapis ::
        _extend_msgapis(options, shared)

      const as_anon = send_anon_api(shared)
      send_from_api(shared)
      const as_src = source_api(shared)

      return @{}
        to(id) :: return as_anon @ id, null, as_anon.root_source(this)
        anon(id) :: return as_anon @ id, null, as_anon.root_source(this)
        as(id) :: return as_src @ id, this

        createMsgContext: shared.createMsgContext
        expire: shared.expire


function _extend_msgapis(options, shared) ::
  const {bind_msg_api, bind_sendmsg, bind_replymsg} =
    options.bind_msgapis @:
      bind_msg_api: shared.bind_msg_api
      bind_sendmsg: shared.bind_sendmsg
      bind_replymsg: shared.bind_replymsg

  if bind_msg_api :: shared.bind_msg_api = bind_msg_api
  if bind_sendmsg :: shared.bind_sendmsg = bind_sendmsg
  if bind_replymsg :: shared.bind_replymsg = bind_replymsg
