
export default p2p_plugin
export function p2p_plugin({ p2p }={}) ::
  return hub => ::
    if undefined === p2p ::
      p2p = bind_basic_p2p @ hub.data_utils

    hub._root_.p2p = p2p


export function bind_basic_p2p({ random_base64 }) ::
  return @{}
    __proto__: null

    async hello(ms_timeout=500) ::
      const { router, channel } = this
      const id_reply = random_base64(6)
      const key = '_m$_' + id_reply

      const p = new Promise @ (resolve, reject) => ::
        this[key] = resolve
        if ms_timeout ::
          router.timeouts @ ms_timeout, reject

      await channel.send @ '', 'hello', @{}
        version: 'basic', id_reply, ts: new Date

      let ans
      try :: ans = await p
      finally :: delete this[key]

      for const id_route of Object(ans).routes || [] ::
        router.addPeer @ id_route, channel, false

      return ans

    peerRoute(pkt) ::
      const {id_target, body} = pkt
      if 'basic' !== Object(body).version :: return

      if 'hello' !== id_target ::
        const fn = this[ '_m$_' + id_target ]
        return fn ? fn.call(this, body) : null

      if body.id_reply ::
        return this.channel.send @ '', body.id_reply, @{}
          version: 'basic', ts: new Date
          routes: Array.from @
            this.router.public_routes.keys()

