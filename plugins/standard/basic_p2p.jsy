export function p2p_plugin({ p2p }={}) ::
  return hub => ::
    if undefined === p2p ::
      p2p = bind_basic_p2p(hub)

    hub._root_.p2p = p2p


export function bind_basic_p2p(hub) ::
  return @{}
    __proto__: null

    initForChannel(channel) ::
      return Object.create @ this, @{}
        channel: @{} value: channel
        router: @{} value: channel.router

    async hello(ms_timeout=500) ::
      const { channel, router } = this
      const id_reply = hub.newTargetId()
      const p = new Promise @ (resolve, reject) => ::
        this[ '_m$_' + id_reply ] = resolve
        if ms_timeout ::
          router.timeouts @ ms_timeout, reject

      await channel.send @ '', 'hello', @{}
        version: 'basic', id_reply, ts: new Date

      let ans
      try :: ans = await p
      finally ::
        delete this[ '_m$_' + id_reply ]

      const { public_routes } = router
      for const id_route of Object(ans).routes || [] ::
        if undefined !== public_routes.get(id_route) ::
          continue // Keep local public routes local

        channel.addRoute @ id_route, false

      return ans

    peerRoute(pkt) ::
      const {1: id_target, body} = pkt
      const fn = this[ '_m$_' + id_target ]
      return fn ? fn.call(this, body) : null

    _m$_hello(body) ::
      if 'basic' !== Object(body).version :: return
      if ! body.id_reply :: return

      return this.channel.send @ '', body.id_reply, @{}
        version: 'basic', ts: new Date
        routes: Array.from @
          this.router.public_routes.keys()

