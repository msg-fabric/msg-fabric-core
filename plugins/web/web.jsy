
export function web_basic_api(hub, plugin_options) ::
  const yes = @=> true

  return @{}
    connect(tgt, options) ::
      let channel = this.createChannel(tgt, options)
      if null == channel.channel_id ::
        channel.channel_id = 'web_basic'

      return channel.init @ channel.channel_id

    createChannel(tgt, options) ::
      if null == options :: options = {}

      let [tgt_send, tgt_recv] = Array.isArray(tgt) ? tgt : [tgt, tgt]

      let dispatch = @
        tgt_send.postMessage ? _web_postmsg
        : tgt_send.send ? _web_send : null

      let {codec} = options
      let args = @[] this.p2p || hub.p2p, dispatch.bind(tgt_send), codec

      let [recv, channel] = codec
        ? hub.router.codec_channel(...args)
        : hub.router.send_channel(...args)
      channel.channel_id = options.channel_id

      if tgt_recv.close ::
        channel.close = @=> @ tgt_recv.close(), true

      let subscribe = options.subscribe || _on_msg_evt
      subscribe @ tgt_recv, recv, options.accept || yes

      if 'function' === typeof tgt_recv.start ::
        tgt_recv.start()
      return channel


    p2p: plugin_options.p2p


  function _on_msg_evt(tgt_recv, fn_recv_pkt, fn_accept) ::
    tgt_recv.addEventListener @ 'message',
      evt => true === fn_accept(evt) && fn_recv_pkt(evt.data)
      @{} passive: true


function _web_postmsg(pkt) :: this.postMessage(pkt)
function _web_send(pkt) :: this.send(pkt)

