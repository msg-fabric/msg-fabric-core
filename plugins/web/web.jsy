import {bind_sendChannel, bind_postMessageChannel} from './_web_channel.jsy'

export default function web_plugin(plugin_options={}) ::
  const _global = 'undefined' !== typeof window ? window : global
  return hub => ::
    let WebSocket = plugin_options.WebSocket

    const createSendChannel = bind_sendChannel @ hub, hub._pkts_.bin_call
    const createPostMessageChannel = bind_postMessageChannel @ hub, hub._pkts_.bin_call

    const plugin = @{} WebSocket,
      createSendChannel, createPostMessageChannel
      connectSend, connectPostMessage
      connectWS, createWebSocket, customWebSocket

    hub.registerProtocols @ ['ws', 'ws:', 'wss', 'wss:'],
      url => plugin.connectWS(url)
    return hub.web = plugin

    function customWebSocket(WebSocket) ::
      this.WebSocket = WebSocket
      return this

    function createWebSocket(ws_or_wss_url) ::
      const l_WebSocket = this.WebSocket || _global.WebSocket
      return new l_WebSocket(ws_or_wss_url+'')

    function connectSend(...args) ::
      const channel = createSendChannel(...args)
      channel.peer_info = hub.p2p.hello(hub, channel)
      return Promise.resolve(channel)

    function connectPostMessage(...args) ::
      const channel = createPostMessageChannel(...args)
      channel.peer_info = hub.p2p.hello(hub, channel)
      return Promise.resolve(channel)

    function connectWS(ws_or_wss_url) ::
      let websock
      if ws_or_wss_url ::
        websock = 'function' !== typeof ws_or_wss_url.send
          ? this.createWebSocket(ws_or_wss_url)
          : ws_or_wss_url

      if undefined === websock ::
        throw new TypeError @ `Invalid websocket connection`

      const channel = createSendChannel(websock)
      channel.peer_info = new Promise @ (resolve, reject) => ::
        const readyState = websock.readyState

        websock.addEventListener @ 'error', reject
        if 0 === readyState :: // connecting state
          websock.addEventListener @ 'open', () => ::
            hub.p2p.hello(hub, channel).then(resolve, reject)

        else if 1 === readyState :: // open state
          hub.p2p.hello(hub, channel).then(resolve, reject)

        else reject @ new Error @ 'WebSocket closed'
      return Promise.resolve(channel)

