import { bind_sendChannel, bind_postMessageChannel, bind_webSocketChannel } from './_web_channel.jsy'

export default function web_plugin(plugin_options={}) ::
  return hub => ::
    const _global_ = hub.data_utils._global_
    let WebSocket = plugin_options.WebSocket
    const protocols = plugin_options.protocols

    const _api_ = @{} hub
      createChannel: hub._pkts_.bin_call.createChannel
    const createSendChannel = bind_sendChannel(_api_)
    const createPostMessageChannel = bind_postMessageChannel(_api_)
    const createWebSocketChannel = bind_webSocketChannel(_api_)

    const plugin = @{} WebSocket,
      createSendChannel, createPostMessageChannel
      connectSend, connectPostMessage
      connectWS, createWebSocket, customWebSocket

    hub.registerProtocols @ ['ws', 'ws:', 'wss', 'wss:'],
      url => plugin.connectWS(url, true)
    return hub.web = plugin

    function customWebSocket(WebSocket) ::
      this.WebSocket = WebSocket
      return this

    function createWebSocket(ws_or_wss_url) ::
      const l_WebSocket = this.WebSocket || _global_.WebSocket
      return new l_WebSocket(ws_or_wss_url+'', protocols)

    function connectSend(...args) ::
      const channel = createSendChannel(...args)
      channel.peer_info = hub.p2p.hello(channel)
      return Promise.resolve(channel)

    function connectPostMessage(...args) ::
      const channel = createPostMessageChannel(...args)
      channel.peer_info = hub.p2p.hello(channel)
      return Promise.resolve(channel)

    function connectWS(ws_or_wss_url, channel_id) ::
      let websock
      if ws_or_wss_url ::
        websock = 'function' !== typeof ws_or_wss_url.send
          ? this.createWebSocket(ws_or_wss_url)
          : ws_or_wss_url

      if undefined === websock ::
        throw new TypeError @ `Invalid websocket connection`

      if true === channel_id ::
        const id = new URL(ws_or_wss_url).pathname
        channel_id = @[] id, false

      const channel = createWebSocketChannel(websock, {channel_id})
      return Promise.resolve(channel)

