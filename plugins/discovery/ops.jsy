
export class DiscoFirst ::
  constructor() ::
    this._cache = new WeakMap()

  async _disco_all(discovery_fns) ::
    let q=[]
    for let fn of discovery_fns ::
      q.push @ this._disco_one(fn)

    for let p of q ::
      await p

    this.query.abort()

  async _disco_one(fn_disco) ::
    try ::
      let res = await fn_disco(this.query)
      this.query.answer(res)
    catch err ::
      this.host._on_error('discovery', err)


  async cached(host, discovery_fns, query) ::
    let belt = this._cache.get(discovery_fns)
    if ! belt ::
      belt = host._disco_cache()
      this._cache.set(discovery_fns, belt)

    let p, cache, {key} = query
    for cache of belt ::
      if p = cache[key] ::
        return p

    ;(cache = belt[0])[key] = p =
      this.search @
        host, discovery_fns, query

    return cache[key] = await p

  async search(host, discovery_fns, query) ::
    let [p_search, _resolve] = host.timeouts.ao_defer_v()

    let self = @{}
      __proto__: this, host, query

    Object.assign @ query, @{}
      host, p_search, done: false

      abort() ::
        _resolve(false)

      async answer(res) ::
        if null != res ::
          if res.then ::
            res = await res

          if true === res || ! res ::
            res = null // falsy and true is "already exists"
          _resolve(res)
        return res

    try ::
      self._disco_all(discovery_fns)
      host._disco_timeout(query.abort)

      return await p_search
    finally ::
      query.done = true

