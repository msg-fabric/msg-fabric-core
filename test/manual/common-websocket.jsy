const fs = require('fs')

import BasicHub from '../_setup'
import web_plugin from '../../cjs/plugin-web'
const WebFabricHub = BasicHub.plugin @ web_plugin()
export const hub = WebFabricHub.create('$server$')

hub.local.registerTarget @ 'hello-server'
  (...args) => console.log('RECV in WS hello-server:', args)


export async function add_websocket(ws, url_path, headers) ::
  console.log @ 'ADD WS:', @[] url_path, headers
  hub.router.unregisterRoute('$browser$')

  const channel = await hub.web.connectWS @ ws, @[] true, url_path

  const peer_info = await channel.peer_info
  console.log('peer_info:', peer_info)
  hub.send @:
    id_route: '$browser$', id_target: 'hello-browser',
    body: @{} msg: 'hello from the WS websocket server'

  return channel


export function bind_handle_request(ws_impl_name) ::
  return async function handle_request(req, res) ::
    const entrypoints = @{}
      '/': @{}
        filename: `/websocket.html`
        content_type: 'text/html; charset=utf-8'

      '/browser.umd.js': @{}
        filename: `browser.umd.js`
        content_type: 'application/javascript'

    const tgt = entrypoints[req.url]
    if tgt ::
      res.writeHead @ 200, @{}
        'Content-Type': tgt.content_type
        'Set-Cookie': `ws_impl_name=${ws_impl_name};test_websock=${Date.now()}`

      fs.createReadStream @
        `${__dirname}/${tgt.filename}`
      .pipe(res)

    else ::
      res.writeHead(404)
      res.end()

