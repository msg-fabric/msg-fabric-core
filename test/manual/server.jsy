import {TestNetHub as Hub} from '../_setup'

const ha = Hub.create('$ha$')
const hb = Hub.create('$hb$')
const hc = Hub.create('$hc$')

const msg_apple = addTarget @ 'ha_apple', ha.local
const msg_orange = addTarget @ 'ha_orange', ha.local

const msg_snake = addTarget @ 'hb_snake', hb.local
const msg_turtle = addTarget @ 'hb_turtle', hb.local

const msg_crow = addTarget @ 'hc_crow', hc.local
const msg_hawk = addTarget @ 'hc_hawk', hc.local

function addTarget(id_target, {id_route, registerTarget}) ::
  registerTarget @ id_target, pkt => ::
    console.log @ `"${id_target}" recieved packet`, pkt
    console.dir @ pkt.json(), {colors:true}
    console.log()

  return body => @: id_target, id_route, body


console.log()

const chain = Promise.resolve()
.then @ do_ha_local
//.then @ do_ha_remote // will not work before do_connect
.then @ do_serve
.then @ do_connect
.then @=> sleep(10) // allow some time for handshaking
.then @ do_ha_remote

async function do_serve() ::
  const svr = ha.tcp.createServer()
    .listen(0, '127.0.0.1')

  chain.then @=> svr.unref()
  return svr.conn_info(true)

async function do_connect(addr) ::
  const chan_ab = await hb.connect(addr)
  const chan_ac = await hc.connect(addr)

  chan_ab.send @ msg_turtle @: hello: 'soup', mode: 'channel'
  chan_ab.send @ msg_snake @: hello: 'bites', mode: 'channel'

  chan_ac.send @ msg_crow @: look: 'shiny', mode: 'channel'
  chan_ac.send @ msg_hawk @: look: 'a bunny!', mode: 'channel'


async function do_ha_local() ::
  ha.send @ msg_apple @: goodbye: 'doctor', mode: 'local'
  ha.send @ msg_orange @: goodbye: 'scurvy', mode: 'local'


async function do_ha_remote() ::
  ha.send @ msg_turtle @: hello: 'soup', mode: 'remote'
  ha.send @ msg_snake @: hello: 'bites', mode: 'remote'

  ha.send @ msg_crow @: look: 'shiny!', mode: 'remote'
  ha.send @ msg_hawk @: look: 'a bunny!', mode: 'remote'


function sleep(ms, res) :: return new Promise @ resolve => setTimeout @ resolve, ms|0, res
