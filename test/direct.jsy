import {TestDirectHub as Hub} from './_setup.jsy'

const ha = Hub.create()
const hb = Hub.create()
const hc = Hub.create()

addTarget @ ha.local, 'ha_apple'
addTarget @ ha.local, 'ha_orange'

addTarget @ hb.local, 'hb_snake'
addTarget @ hb.local, 'hb_turtle'

addTarget @ hc.local, 'hc_crow'
addTarget @ hc.local, 'hc_hawk'

function addTarget(host, id) ::
  host.registerTarget @ id, (pkt, tgt_router, hub_router) => ::
    console.log @ `"${id}" recieved packet`, pkt


call @=>> ::
  const chan_ab = await ha.direct.connect(hb)
  return
  const chan_ac = await ha.direct.connect(hc)

  const chan_ca = await hc.direct.connect(ha)
  const chan_cb = await hc.direct.connect(hb)

  const chan_ba = await hb.direct.connect(ha)
  const chan_bc = await hb.direct.connect(hc)

/*
  async function main_server() ::
    const hub = new Hub()

    const channel = await hub.connect_self()
    channel.sendJSON @:
      id_router: hub.router.id_self
      id_target: 123
      body: 'self-echo packet works'

    return hub

  async function main_client_one(peer) ::
    const hub = new Hub()
    const channel = await hub.direct.connect @ peer
    channel.sendJSON @:
      id_router: peer
      id_target: 123
      header: @: bonkers: true

  async function main_client_two(peer) ::
    const hub = new Hub()
    const channel = await hub.direct.connect @ peer
    channel.sendJSON @:
      id_router: peer
      id_target: 123
      body: @: hello: 'there'
*/




function call(f) :: return f()
