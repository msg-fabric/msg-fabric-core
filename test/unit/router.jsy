import { Hub, expect, newLog, sleep } from './_setup.jsy'

export default function test_hub_router() ::
  var hub, log, test_chan
  beforeEach @=>> ::
    log = newLog()
    hub = Hub.create('$unit$')

    test_chan = Object.assign @ hub.router.local_channel(), @{}
      undeliverable({0: id_route, 1: id_target}, mode) ::
        log @ 'undeliverable', @{} mode, id_route, id_target


  describe @ 'messages to targets', @=> ::

    it @ 'should call handler if target does exist', @=>> ::
      hub.local.addTarget @ 'a-tgt', (pkt, pktctx) => ::
        const {0: id_route, 1: id_target} = pkt
        log @ 'tgt recv', @{} id_route, id_target, body: pkt.body

      await test_chan.send @:
        0: '$unit$'
        1: 'a-tgt'
        body: @{} msg: 'a message'

      await sleep(0)

      expect(log.calls).to.be.deep.equal @#
        @[] 'tgt recv', @{} id_route: '$unit$', id_target: 'a-tgt', body: @{} msg: 'a message'


    it @ 'should be able to lookup logical routes and targets', @=>> ::
      const tgt_id = new Date().toISOString()
      const logical = @{}
        'a-logical-tgt': @[] '$unit$', tgt_id

      hub.router.addRoute @ '$dynamic$', async (pkt, pktctx) => ::
        const dyn = logical[pkt[1]]
        log @ 'dynamic route', pkt[1], dyn[1]
        pkt[0] = dyn[0]
        pkt[1] = dyn[1]
        await pktctx.redispatch(pkt, pktctx)

      hub.local.addTarget @ tgt_id, (pkt, pktctx) => ::
        const {0: id_route, 1: id_target} = pkt
        log @ 'tgt recv', @{} id_route, id_target, body: pkt.body

      await test_chan.send @:
        0: '$dynamic$', 1: 'a-logical-tgt'
        body: @{} msg: 'a logical message'

      await sleep(0)

      expect(log.calls).to.be.deep.equal @#
        @[] 'dynamic route', 'a-logical-tgt', tgt_id
        @[] 'tgt recv', @{} id_route: '$unit$', id_target: tgt_id, body: @{} msg: 'a logical message'


  describe @ 'handles undeliverables', @=> ::
    it @ 'should call channel.undeliverable if route does not exist', @=>> ::
      await test_chan.send @:
        0: 'dne-route'
        1: 'dne-tgt'
        body: @{} msg: 'a message'

      await sleep(10)

      expect(log.calls).to.be.deep.equal @#
        @[] 'undeliverable', @{} mode: 'route', id_route: 'dne-route', id_target: 'dne-tgt'


    it @ 'should call channel.undeliverable if target does not exist', @=>> ::
      await test_chan.send @:
        0: '$unit$'
        1: 'dne-tgt'
        body: @{} msg: 'a message'

      await sleep(10)

      expect(log.calls).to.be.deep.equal @#
        @[] 'undeliverable', @{} mode: 'target', id_route: '$unit$', id_target: 'dne-tgt'


  describe @ 'discovery', @=> ::

    describe @ 'direct', @=> ::
      it @ 'should call router.routeDiscovery if route does not exist', @=>> ::
        hub.router.discovery.push @
          ({key}) => ::
            log @ 'discovery', @{} key
            return null

        await test_chan.send @:
          0: 'dne-route'
          1: 'dne-tgt'
          body: @{} msg: 'a message'

        await sleep(0)

        expect(log.calls).to.be.deep.equal @#
          @[] 'discovery', @{} key: 'dne-route'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'dne-route', id_target: 'dne-tgt'


      it @ 'should use router.routeDiscovery channel answer if route found', @=>> ::
        hub.router.discovery.push @
          ({key, host}) => ::
            log @ 'discovery', @{} key
            host.addPeer @ key, @:
              send({0: id_route, 1: id_target}) ::
                log @ 'sent pkt', @{} id_route, id_target

        await test_chan.send @:
          0: 'dne-route'
          1: 'dne-tgt'
          body: @{} msg: 'a message'

        await sleep(0)

        expect(log.calls).to.be.deep.equal @#
          @[] 'discovery', @{} key: 'dne-route'
          @[] 'sent pkt', @{} id_route: 'dne-route', id_target: 'dne-tgt'


      it @ 'should use router.routeDiscovery function answer if route found', @=>> ::
        hub.router.discovery.push @
          ({key, host}) => ::
            log @ 'discovery', @{} key
            host.addRoute @ key, 
              ({0: id_route, 1: id_target}) => ::
                log @ 'route pkt', @{} id_route, id_target

        await test_chan.send @:
          0: 'dne-route'
          1: 'dne-tgt'
          body: @{} msg: 'a message'

        await sleep(0)

        expect(log.calls).to.be.deep.equal @#
          @[] 'discovery', @{} key: 'dne-route'
          @[] 'route pkt', @{} id_route: 'dne-route', id_target: 'dne-tgt'


      it @ 'should timeout router.routeDiscovery if no response', @=>> ::
        hub.router._discoveryTimeout = resolve => ::
          log @ 'createDiscoveryTimeout'
          setTimeout @ resolve, 10

        hub.router.discovery.push @
          ({key}) => ::
            log @ 'discovery, no return', @{} key

        await test_chan.send @:
          0: 'dne-route'
          1: 'dne-tgt'
          body: @{} msg: 'a message'

        await sleep(0)

        expect(log.calls).to.be.deep.equal @#
          'createDiscoveryTimeout'
          @[] 'discovery, no return', @{} key: 'dne-route'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'dne-route', id_target: 'dne-tgt'

    describe @ 'addDiscovery', @=> ::

      it @ 'should find routes via addDiscovery with prefix', @=>> ::
        hub.router.addDiscovery @ 'bingo-', ({key, host}) => ::
          log @ 'discovery', @{} key
          host.addRoute @ key,
            pkt => :: log @ 'route pkt', @{} id_route: pkt[0], id_target: pkt[1]

        await test_chan.send @ 'bingo-barge', 'some-tgt', 'a message'
        await test_chan.send @ 'bingo-wrong', 'other-tgt', 'a message'
        await test_chan.send @ 'trash-barge', 'third-tgt', 'a message'
        await sleep(0)

        expect(log.calls.sort()).to.be.deep.equal @#
          @[] 'discovery', @{} key: 'bingo-barge'
          @[] 'discovery', @{} key: 'bingo-wrong'
          @[] 'route pkt', @{} id_route: 'bingo-barge', id_target: 'some-tgt'
          @[] 'route pkt', @{} id_route: 'bingo-wrong', id_target: 'other-tgt'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'trash-barge', id_target: 'third-tgt'


      it @ 'should find routes via addDiscovery with regexp', @=>> ::
        hub.router.addDiscovery @ /-barge$/, ({key, host}) => ::
          log @ 'discovery', @{} key
          host.addRoute @ key,
            pkt => :: log @ 'route pkt', @{} id_route: pkt[0], id_target: pkt[1]

        await test_chan.send @ 'bingo-barge', 'some-tgt', 'a message'
        await test_chan.send @ 'bingo-wrong', 'other-tgt', 'a message'
        await test_chan.send @ 'trash-barge', 'third-tgt', 'a message'
        await sleep(0)

        expect(log.calls.sort()).to.be.deep.equal @#
          @[] 'discovery', @{} key: 'bingo-barge'
          @[] 'discovery', @{} key: 'trash-barge'
          @[] 'route pkt', @{} id_route: 'bingo-barge', id_target: 'some-tgt'
          @[] 'route pkt', @{} id_route: 'trash-barge', id_target: 'third-tgt'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'bingo-wrong', id_target: 'other-tgt'


      it @ 'should find routes via addDiscovery with prefix', @=>> ::
        const test_fn = ({key}) => ::
          log @ 'a prefix test', @{} key
          return key.endsWith('-wrong')

        hub.router.addDiscovery @ test_fn, ({key, host}) => ::
          log @ 'discovery', @{} key
          host.addRoute @ key,
            pkt => :: log @ 'route pkt', @{} id_route: pkt[0], id_target: pkt[1]

        await test_chan.send @ 'bingo-barge', 'some-tgt', 'a message'
        await test_chan.send @ 'bingo-wrong', 'other-tgt', 'a message'
        await test_chan.send @ 'trash-barge', 'third-tgt', 'a message'
        await sleep(0)

        expect(log.calls.sort()).to.be.deep.equal @#
          @[] 'a prefix test', @{} key: 'bingo-barge'
          @[] 'a prefix test', @{} key: 'bingo-wrong'
          @[] 'a prefix test', @{} key: 'trash-barge'
          @[] 'discovery', @{} key: 'bingo-wrong'
          @[] 'route pkt', @{} id_route: 'bingo-wrong', id_target: 'other-tgt'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'bingo-barge', id_target: 'some-tgt'
          @[] 'undeliverable', @{} mode: 'route', id_route: 'trash-barge', id_target: 'third-tgt'


  describe @ 'upstream and hierarchical', @=> ::

    it @ 'should call router.upstream if route does not exist', @=>> ::
      hub.router.upstream = pkt => ::
        log @ 'upstream', pkt[0], pkt[1]

      await test_chan.send @:
        0: 'dne-route'
        1: 'dne-tgt'
        body: @{} msg: 'a message'

      await sleep(0)

      expect(log.calls).to.be.deep.equal @#
        @[] 'upstream', 'dne-route', 'dne-tgt'


    it @ 'should call hierarchical parent route if route does not exist', @=>> ::
      hub.router.addRoute @ 'a', pkt => log @ `route a :: ${pkt[0]}`
      hub.router.addRoute @ 'c.d', pkt => log @ `route c.d :: ${pkt[0]}`

      await test_chan.send @: 0: 'a.b', 1: 'tgt', body: {}
      await test_chan.send @: 0: 'c', 1: 'tgt', body: {}
      await test_chan.send @: 0: 'c.d', 1: 'tgt', body: {}
      await test_chan.send @: 0: 'c.d.e', 1: 'tgt', body: {}
      await test_chan.send @: 0: 'a.e', 1: 'tgt', body: {}
      
      await sleep(0)

      expect(log.calls).to.be.deep.equal @#
        'route a :: a.b'
        @[] 'undeliverable', @{} id_route: 'c', id_target: 'tgt', mode: 'route'
        'route c.d :: c.d'
        'route c.d :: c.d.e'
        'route a :: a.e'
        
