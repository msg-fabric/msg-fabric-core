export const sym_sampi = '\u03E0' // 'Ï '

var Hub, HubCBOR
export { Hub, HubCBOR }
export function _init(FabricHub, FabricHubCBOR) ::
  Hub = FabricHub
  HubCBOR = FabricHubCBOR

const chai = require('chai')
import p_chai from 'chai-as-promised'
chai.use @ p_chai

export const assert = chai.assert
export const expect = chai.expect

export const sinon = require('sinon')

export const sleep = ms =>
  new Promise @ resolve =>
    setTimeout @ resolve, ms

export function newLog() ::
  const log = (...args) =>
    log.calls.push @ 1 === args.length
      ? args[0] : args

  log.calls = []
  log.expectOneLogOf = expectOneLogOf
  log.expectLastLogOf = expectLastLogOf
  return log

async function expectOneLogOf(...args) ::
  await sleep(1)
  expect(this.calls).to.have.lengthOf(1)
  expect(this.calls[0]).to.deep.equal(args)

async function expectLastLogOf(...args) ::
  await sleep(1)
  const last = this.calls[ this.calls.length - 1 ]
  expect @ last.slice(0, -1) // trim off body
  .to.deep.equal(args)

export function createTestHub(name, log, use_cbor) ::
  const hub = use_cbor
    ? HubCBOR.create @ `$${name}$`
    : Hub.create @ `$${name}$`

  if log ::
    hub.local.addTarget @ `tgt_${name}`
      pkt => log @ `recv [${pkt.id_route} ${pkt.id_target}]`, pkt.body

  expect(hub.local.id_route)
  .to.equal @ `$${name}$`

  return hub
