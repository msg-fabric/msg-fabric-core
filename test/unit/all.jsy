import test_smoke from './smoke.jsy'
import test_hub_creation from './hub_create.jsy'
import test_data_utils from './data_utils.jsy'
import test_hub_router from './router.jsy'
import test_target_router from './targets.jsy'

it @ 'smoke', test_smoke
describe @ 'Hub Creation', test_hub_creation
describe @ 'Data Utils', test_data_utils
describe @ 'Router', test_hub_router
describe @ 'Target Router', test_target_router


import test_pi_direct from './plugins/direct.jsy'
import test_pi_rpc from './plugins/rpc.jsy'

describe @ 'General Plugins', function() ::

  describe @ 'direct', function() ::
    this.slow(500)

    test_pi_direct()

  describe @ 'rpc', function() ::
    test_pi_rpc()


#IF PLAT_WEB
  import test_pi_web from './plugins/web.jsy'

  describe @ 'Browser Plugins', function() ::
    this.slow(500)

    describe @ 'web with JSON', @=> test_pi_web(false)

    describe @ 'web with CBOR', @=> test_pi_web(true)

#IF PLAT_NODEJS

  import test_pi_net_direct from './plugins/net_direct.jsy'
  import test_pi_net_tcp from './plugins/net_tcp.jsy'
  import test_pi_net_tls from './plugins/net_tls.jsy'
  import { test_websockets_faye, test_websockets_ws } from './plugins/web_node.jsy'

  describe @ 'NodeJS Plugins', function() ::
    this.slow(500)

    describe @ 'net with JSON', @=> ::
      describe @ 'hub.direct_stream', @=> test_pi_net_direct(false)
      describe @ 'hub.tcp', @=> test_pi_net_tcp(false)
      describe @ 'hub.tls', @=> test_pi_net_tls(false)

    describe @ 'web with JSON (node side)', @=> ::
      describe @ 'using "faye-websockets" WebSocket library', @=> ::
        test_websockets_faye(false)

      describe @ 'using "ws" WebSocket library', @=> ::
        test_websockets_ws(false)

    describe @ 'net with CBOR', @=> ::
      describe @ 'hub.direct_stream', @=> test_pi_net_direct(true)
      describe @ 'hub.tcp', @=> test_pi_net_tcp(true)
      describe @ 'hub.tls', @=> test_pi_net_tls(true)

    describe @ 'web with CBOR (node side)', @=> ::
      describe @ 'using "faye-websockets" WebSocket library', @=> ::
        test_websockets_faye(true)

      describe @ 'using "ws" WebSocket library', @=> ::
        test_websockets_ws(true)

