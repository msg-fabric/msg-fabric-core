import { Hub, expect, newLog, sleep } from './_setup.jsy'

export default function test_target_router() ::
  describe @ 'simple messages', @::
    _test_target_router_with @\ hub, log ::

      hub.local.addTarget @ 'a-tgt', (pkt, pktctx) => ::
        const {0: id_route, 1: id_target, meta, body} = pkt
        log @ 'tgt recv', @{} 0: id_route, 1: id_target, meta, body

        if body && body.id_reply ::
          log @ 'replying to', body.id_reply
          pktctx.send @ body.id_reply, @{} ts_echo: body.ts

  describe @ 'stream simple messages', @::
    _test_target_router_with @\ hub, log ::

      hub.local.addStream @ 'a-tgt', async ({stream}) => ::
        for await let [pkt, pktctx] of stream ::
          const {0: id_route, 1: id_target, meta, body} = pkt
          log @ 'tgt recv', @{} 0: id_route, 1: id_target, meta, body

          if body && body.id_reply ::
            log @ 'replying to', body.id_reply
            pktctx.send @ body.id_reply, @{} ts_echo: body.ts


function _test_target_router_with(fn_add_target) ::
    var hub, log

    async function check_msg(ts, body, meta) ::
      if null == body ::
        body = @{} msg: 'a message', ts

      await sleep(1)

      expect(log.calls[0]).to.be.deep.equal @#
        'tgt recv', @{} 0: '$unit$', 1: 'a-tgt', meta, body

      if log.calls[1] ::
        expect(log.calls[1][0]).to.be.equal @ 'replying to'


    beforeEach @::>
      log = newLog()
      hub = Hub.create('$unit$')
      hub.router.timeouts.changeInterval @ 50

      fn_add_target(hub, log)


    it @ 'message pkt send({ 0, 1, body })', @::>
      const ts = new Date()
      await hub.send @:
        0: '$unit$'
        1: 'a-tgt'
        body: @{} msg: 'a message', ts

      await check_msg(ts)


    it @ 'message pkt with meta send({ 0, 1, meta, body })', @::>
      const ts = new Date()
      await hub.send @:
        0: '$unit$'
        1: 'a-tgt'
        meta: @{} ts
        body: @{} msg: 'a message', ts

      await check_msg(ts, null, { ts })


    it @ 'message addr body send({ 0, 1 }, body )', @::>
      const ts = new Date()
      await hub.send @
        @{} 0: '$unit$', 1: 'a-tgt'
        @{} msg: 'a message', ts

      await check_msg(ts)


    it @ 'message addr body send([ 0, 1 ], body )', @::>
      const ts = new Date()
      await hub.send @
        @[] '$unit$', 'a-tgt'
        @{} msg: 'a message', ts

      await check_msg(ts)


    it @ 'message positional send(id_route, id_target, body )', @::>
      const ts = new Date()
      await hub.send @ '$unit$', 'a-tgt', @{}
        msg: 'a message', ts

      await check_msg(ts)


    it @ 'message with reply', @::>
      const ts = new Date()

      const reply = hub.local.addReply()
      expect(reply.response).to.be.a('function')

      expect(reply.id).to.be.an('array')
      expect(reply[0]).to.equal(reply.id[0])
      expect(reply[1]).to.equal(reply.id[1])

      let p = reply.response()
      const body = @{}
        msg: 'a message', ts, id_reply: reply.id

      await hub.send @ '$unit$', 'a-tgt', body

      await check_msg(ts, body)

      const ans = await p
      expect(ans).to.be.deep.equal @:
        ts_echo: ts


    it @ 'message with reply timeout', @::>
      const ts = new Date()

      const no_reply = hub.local.addReply(10)
      expect(no_reply.response).to.be.a('function')

      const body = @{}
        msg: 'a message', ts, id_other: no_reply.id

      await hub.send @ '$unit$', 'a-tgt', body

      await check_msg(ts, body)

      let absent = Symbol('absent')
      let p = no_reply.response(absent)
      expect(p).to.be.fulfilled
      expect(p).to.eventually.be.equal(absent)

