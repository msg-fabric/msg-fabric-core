import {TestDirectHub as Hub} from './_setup.jsy'

function addTarget(hub, id_target, api) ::
  const {id_route} = hub.local
  console.log()
  console.log @ 'create', @{} id_route, id_target
  const tgt = hub.msgs.as({id_route, id_target})

  hub.local.registerTarget(id_target, on_msg)
  if api.on_init ::
    Promise.resolve()
      .then @=> api.on_init(tgt)
      .catch @ console.error

  return tgt.toJSON()

  function on_msg(pkt) ::
    tgt._recv_(pkt)

    if null != api.on_msg ::
      api.on_msg(pkt)
        .catch @ console.error



const hub = Hub.create('hub')


const apple = addTarget @ hub, 'apple', @{}
  async on_init(tgt) ::
    console.log @ 'init apple' //, tgt, orange
    const res = tgt.to(orange).send @:
      msg: 'hello from Apple'

    console.log @ 'res?', res
    console.log @ 'await res:', await res

  async on_msg(pkt) ::
    console.log()
    console.log @ 'apple got', pkt, pkt.json()

    if pkt.has_reply ::
      pkt.anon.send @:
        msg: 'zoiks!'
    else ::
      console.log @ 'no reply available', pkt, pkt._hdr_.op


const orange = addTarget @ hub, 'orange', @{}
  async on_init(tgt) ::
    console.log @ 'init orange' //, tgt, apple

  async on_msg(pkt) ::
    console.log @ 'orange got', pkt, pkt.json()

    if pkt.has_reply ::
      const res = pkt.reply.send @:
        msg: 'back at ya!'
      console.log @ 'orange replyed', res
      console.log @ 'orange replyed:', await res
    else ::
      console.log @ 'no reply available', pkt, pkt._hdr_.op

