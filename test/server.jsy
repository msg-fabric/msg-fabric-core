require('source-map-support').install()
import {URL} from 'url'
import {createServer, createConnection} from 'net'
import {MessageHub} from '../dist/hub'
import tcp_plugin from '../dist/plugins/net'
import {packMessage} from '../dist/parser'
import {json_codec} from '../dist/codecs'

const Hub = MessageHub
  .plugin @ tcp_plugin

if 1 ::
  ::
    const hub = new Hub()
    hub.net.createServer()
      .listen(8080, '127.0.0.1')
      //.unref()
    var id_hub = hub.router.id_self

    hub.router.registerTarget @ 123, (msg, router) => ::
      const header = JSON.parse @ msg.sliceHeader().toString() || 'null'
      const body = JSON.parse @ msg.sliceBody().toString() || 'null'
      console.log @ 'target got message!', @: header, body

  ::
    const hub = new Hub()
    const sock = hub.net.connect('tcp://127.0.0.1:8080')
    send_json_msg @ sock, @:
      id_router: id_hub
      id_target: 123
      header: @: bonkers: true

  ::
    const hub = new Hub()
    const sock = hub.net.connect @: host:'127.0.0.1', port: 8080
    send_json_msg @ sock, @:
      id_router: id_hub
      id_target: 123
      body: @: hello: 'there'



function pack_json_msg(msg_obj) ::
  if null != msg_obj.header ::
    msg_obj.header = json_codec.encode @ msg_obj.header
  if null != msg_obj.body ::
    msg_obj.body = json_codec.encode @ msg_obj.body
  return packMessage(msg_obj)

function send_json_msg(sock, msg_obj) ::
  sock.write @ pack_json_msg @ msg_obj


