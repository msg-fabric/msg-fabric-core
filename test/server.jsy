require('source-map-support').install()
import {URL} from 'url'
import {createServer, createConnection} from 'net'
import {MessageHub} from '../dist/hub'
import tcp_plugin from '../dist/plugins/net'
import {packMessage} from '../dist/parser'

const Hub = MessageHub
  .plugin @ tcp_plugin

async function main_server() ::
  const hub = new Hub()
  const svr = hub.net.createServer()
    .listen(8080, '127.0.0.1')

  setTimeout @
    () => ::
      console.log @ 'Allowing server to expireâ€¦'
      svr.unref()
    1000

  hub.router.registerTarget @ 123, (msg, router) => ::
    const header = JSON.parse @ msg.sliceHeader().toString() || 'null'
    const body = JSON.parse @ msg.sliceBody().toString() || 'null'
    console.log @ 'target got message!', @: header, body

  return hub.router.id_self

async function main_client_one(id_hub) ::
  const hub = new Hub()
  const sendMsgRaw = await hub.net.connect('tcp://127.0.0.1:8080')
  sendMsgRaw @ pack_json_msg @:
    id_router: id_hub
    id_target: 123
    header: @: bonkers: true

async function main_client_two(id_hub) ::
  const hub = new Hub()
  const sendMsgRaw = await hub.net.connect @: host:'127.0.0.1', port: 8080
  sendMsgRaw @ pack_json_msg @:
    id_router: id_hub
    id_target: 123
    body: @: hello: 'there'


function pack_json_msg(msg_obj) ::
  if null != msg_obj.header ::
    msg_obj.header = JSON.stringify @ msg_obj.header
  if null != msg_obj.body ::
    msg_obj.body = JSON.stringify @ msg_obj.body
  return packMessage(msg_obj)


if module === require.main ::
  main_server().then @ id_hub => ::
    main_client_one @ id_hub
    main_client_two @ id_hub
