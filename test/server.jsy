require('source-map-support').install()
import {TextEncoder, TextDecoder} from 'util'
import MessageHub from '../dist'

import tcp_plugin from '../dist/plugins/tcp'

import basic_router from '../dist/plugins/basic_router'
import ec_router from '../dist/plugins/ec_router'
import node_router from '../dist/plugins/node_router'
import browser_router from '../dist/plugins/browser_router'

function pick_a_router() ::
  const routers = @[] basic_router, ec_router, node_router, browser_router
  const idx = 0 | routers.length * Math.random()
  console.log @ `\n\nUsing Router Plugin "${routers[idx].name}"\n`
  return routers[idx] @: TextEncoder, TextDecoder

const Hub = MessageHub.plugin @
  pick_a_router()
  tcp_plugin()

async function main_server() ::
  const hub = new Hub()
  const svr = hub.tcp.createServer()
    .listen(8080, '127.0.0.1')

  setTimeout @
    () => ::
      console.log @ 'Allowing server to expireâ€¦'
      svr.unref()
    1000

  hub.router.registerTarget @ 123, (msg, router) => ::
    const header = msg.header_json()
    const body = msg.body_json()
    console.log @ 'target got message!', @: header, body

  return hub.router.id_self

async function main_client_one(id_hub) ::
  const hub = new Hub()
  const channel = await hub.tcp.connect @: host:'127.0.0.1', port: 8080
  channel.sendJSON @:
    id_router: id_hub
    id_target: 123
    header: @: bonkers: true

async function main_client_two(id_hub) ::
  const hub = new Hub()
  const channel = await hub.connect('tcp://127.0.0.1:8080')
  channel.sendJSON @:
    id_router: id_hub
    id_target: 123
    body: @: hello: 'there'


if module === require.main ::
  main_server()
  .then @ id_hub => ::
    main_client_one @ id_hub
    main_client_two @ id_hub
  .catch @ console.error

  process.on @ 'unhandledRejection', (reason, p) => ::
    console.log @ 'Unhandled Rejection at:', p, 'reason:', reason
