require('source-map-support').install()
import {URL} from 'url'
import {createServer, createConnection} from 'net'
import {PacketMessageHub as BaseHub} from '../dist/hub'
import {packMessage} from '../dist/parser'
import {json_codec} from '../dist/codecs'

function pack_json_msg(msg_obj) ::
  if null != msg_obj.header ::
    msg_obj.header = json_codec.encode @ msg_obj.header
  if null != msg_obj.body ::
    msg_obj.body = json_codec.encode @ msg_obj.body
  return packMessage(msg_obj)

function send_json_msg(sock, msg_obj) ::
  return new Promise @ function (resolve, reject) ::
    msg_obj = pack_json_msg @ msg_obj
    sock.write @ msg_obj
      function (err) :: err ? reject(err) : resolve()

class PacketMessageHub extends BaseHub ::
  sendMsg = send_json_msg

  connect(options) ::
    if 'string' === typeof options ::
      const {hostname:host, port} = new URL(options)
      options = @{} host, port

    const sock = createConnection @ options, () => ::
      this.on_connect_peer @ sock
        sendMsgRaw.bind(null, sock)

    if 'function' === typeof this.sendMsg ::
      sock.sendMsg = this.sendMsg.bind(this, sock)
    return sock

  createServer() ::
    return createServer @ sock => ::
      sock.setKeepAlive(true).setNoDelay().unref()
      this.on_connect_peer @ sock
        sendMsgRaw.bind(null, sock)

function sendMsgRaw(sock, msg, asPromise) ::
  if null === msg ::
    return void sock.end()
  if ! asPromise ::
    return void sock.write(msg)
  return new Promise @ function (resolve, reject) ::
    sock.write @ msg, err => err ? reject(err) : resolve()


if 1 ::
  ::
    const hub = new PacketMessageHub()
    hub.createServer()
      .listen(8080, '127.0.0.1')
      //.unref()

  ::
    const hub = new PacketMessageHub()
    const sock = hub.connect('tcp://127.0.0.1:8080')
    sock.sendMsg @:
      header: @: bonkers: true

  ::
    const hub = new PacketMessageHub()
    const sock = hub.connect @: host:'127.0.0.1', port: 8080
    sock.sendMsg @:
      body: @: hello: 'there'
