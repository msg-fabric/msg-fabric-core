const o_assign = Object.assign

export const base_channel = @{}
  __proto__: null

  toJSON() :: throw new Error @ 'Not serializable'

  undeliverable(pkt, mode) ::
    const {id_route, id_target} = pkt
    console.warn @ '~~ undeliverable',
      @{} mode, id_route, id_target

  on_dispatch_error(pkt, err) ::
    const {id_route, id_target} = pkt
    console.warn @ '~~ channel dispatch error',
      @{} id_route, id_target
      err

  on_send_error(err) ::
    console.warn @ '~~ channel send error', err

  addRoute(id_route, override) ::
    return this.router.addRoute @
      id_route, this.dispatch || this.send, override

  //shutdown() ::

async function _post_sent(pkt, p) ::
  if undefined === pkt.on_sent ::
    return p

  const r = await p
  pkt.on_sent(pkt)
  return r




export function direct_channel(send_ex) ::
  const { dispatch } = this
  const chan = @{}
    __proto__: this._channel_
    dispatch: send_ex, send, is_direct: true

  return @[] recv, chan

  function send(pkt) ::
    return _post_sent @ pkt, send_ex @ pkt
  async function recv(pkt) ::
    return dispatch @ await pkt, chan




#IF PLAT_NODEJS
  // use V8's serialize & deserialize for Structured Clone
  const { serialize, deserialize } = require('v8')

  export function local_channel() ::
    const { dispatch } = this
    const chan = @{}
      __proto__: this._channel_
      send, is_local: true
      addRoute: null,

    return chan

    function send(pkt) ::
      const pkt0 = pkt
      if undefined !== pkt.on_sent ::
        // shallow pre-clone
        pkt = o_assign({}, pkt)
        delete pkt.on_sent

      return _post_sent @ pkt0,
        _send_ex @ serialize @ pkt
    async function _send_ex(pkt) ::
      try ::
        pkt = deserialize @ await pkt
        return dispatch(pkt, chan)
      catch err ::
        chan.on_dispatch_error @ pkt, err

#ELSE
  // use MessageChannel for Structured Clone
  export function local_channel() ::
    const { dispatch } = this
    const { port1, port2 } = new MessageChannel()
    port2.onmessage = _send_ex

    const map = new Map()
    let q=[], msg_id=1

    const chan = @{}
      __proto__: this._channel_
      send, is_local: true
      addRoute: null,

    return chan

    function send(pkt) ::
      const pkt0 = pkt
      if undefined !== pkt.on_sent ::
        // shallow pre-clone
        pkt = o_assign({}, pkt)
        delete pkt.on_sent

      return _post_sent @ pkt0,
        new Promise @ resolve => ::
          const id = q.pop() || msg_id++
          map.set @ id, resolve
          port1.postMessage @# id, pkt

    function _send_ex(evt) ::
      const [id, pkt] = evt.data
      const resolve = map.get(id)
      map.delete(id)
      q.push(id)

      try ::
        return resolve @ dispatch(pkt, chan)
      catch err ::
        chan.on_dispatch_error @ pkt, err

