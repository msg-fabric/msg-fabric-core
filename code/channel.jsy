import {send_hello, send_pingpong} from './control_protocol.jsy'


export class Channel ::
  sendRaw() :: throw new Error @ `Instance responsiblity`
  packRaw() :: throw new Error @ `Instance responsiblity`

  packAndSendRaw(...args) ::
    return this.sendRaw @ this.packRaw @ ...args

  sendJSON(pkt_obj) ::
    return this.sendRaw @ this.packJSON @ pkt_obj
  packJSON(pkt_obj) ::
    if undefined !== pkt_obj.header ::
      pkt_obj.header = JSON.stringify @ pkt_obj.header
    if undefined !== pkt_obj.body ::
      pkt_obj.body = JSON.stringify @ pkt_obj.body
    return this.packRaw(pkt_obj)


  // --- Control message utilities

  sendRoutingHandshake() ::
    return send_hello(this, this.router.ec_pub_id)
  sendPing() ::
    return send_pingpong(this)


  clone(props, ...extra) ::
    const self = Object.create(this, props)
    return 0 === extra.length ? self : Object.assign(self, ...extra)
  bindChannel(sendRaw, props) :: return bindChannel(this, sendRaw, props)
  bindDispatchPackets() :: return bindDispatchPackets(this)

  undeliverable(pkt, mode) ::
    console.warn @ 'undeliverable:', pkt, mode

  static asAPI(hub, router, packRaw) ::
    const self = new this()
    Object.defineProperties @ self, @:
      packRaw: @: value: packRaw
      router: @: value: router
      hub: @: value: hub
      _root_: @: value: self
    return self

  static asChannelAPI(hub, router, packetParser) ::
    const self = this.asAPI @ hub, router, packetParser.packPacket
    return self

  static asInternalAPI(hub, router, packetParser) ::
    const self = this.asAPI @ hub, router, packetParser.packPacketObj
    return self.bindChannel @ bindDispatchInternalPacket(router)

export default Channel



export function bindChannel(channel, sendRaw, props) ::
  if 'function' !== typeof sendRaw ::
    throw new TypeError @ `Channel expects 'sendRaw' function parameter`

  const core_props = @: sendRaw: @{} value: sendRaw
  props = null == props ? core_props : Object.assign @ core_props, props

  const self = Object.create @ channel, props
  return sendRaw.channel = self


export function bindDispatchInternalPacket(router) ::
  const dispatch = router.dispatch
  return dispatch_pkt_obj

  function dispatch_pkt_obj(pkt) ::
    if undefined === pkt._raw_ ::
      throw new TypeError @ `Expected a parsed pkt_obj with valid '_raw_' buffer property`
    dispatch @ [pkt], dispatch_pkt_obj.channel
    return true


export function bindDispatchPackets(channel) ::
  const dispatch = channel.router.dispatch
  const feed = channel.hub.packetParser.packetStream()

  return function on_recv_data(data) ::
    const pktList = feed(data)
    if 0 < pktList.length ::
      dispatch @ pktList, channel
