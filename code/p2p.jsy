import TargetRouter from './targets.jsy'

export class P2PRouter extends TargetRouter ::
  constructor(router) ::
    super('', router)
    this.public_routes = []
    this.initP2P()

  publishRoutes() ::
  publishRoute(route) ::
    const id = route.id_route ? route.id_route
      : 'string' === typeof route ? route
      : null

    if ! id :: throw new Error @ 'Invalid route identifier'
    this.public_routes.push(id)
    return this


  initP2P() ::
    this.registerTarget @ 'hello', this._tgt_hello.bind(this)
    this.registerTarget @ 'olleh', this._tgt_olleh.bind(this)

  helloHandshake() ::
    return @{}
      id_target: 'hello', id_route: ''
      body: this.public_routes

  _tgt_hello(pkt, pktctx) ::
    const {channel, hub_router} = pktctx
    channel.send @:
      id_target: 'olleh', id_route: ''
      body: this.public_routes

    const peer_routes = pkt.json()
    for const id_route of peer_routes ::
      hub_router.registerPeerRoute @ id_route, channel

  _tgt_olleh(pkt, pktctx) ::
    const {channel, hub_router} = pktctx
    const peer_routes = pkt.json()
    for const id_route of peer_routes ::
      hub_router.registerPeerRoute @ id_route, channel


export default P2PRouter
