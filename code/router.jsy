import { o_assign, o_create, is_func, as_func } from './builtins.jsy'
import { DiscoveryBase, bindTimeouts } from './utils.jsy'
import { bindCoreRouterAPI } from './router_core.jsy'
import { base_channel, channel_kinds } from './channel.jsy'

export class FabricRouter extends DiscoveryBase ::
  constructor(hub) ::
    super()
    o_assign @ this, @{}
      timeouts: bindTimeouts(),
      _channel_: @{} __proto__: base_channel, router: this
      public_routes: this._initPublicRoutes()

    const self = o_create(this)
    if this._skip_bind_api ::
      return self

    o_assign @ this,
      bindCoreRouterAPI @ self, hub, this._initRoutes()
    return self

  _initRoutes() :: return new Map()
  _initPublicRoutes() :: return new Map()

  _on_error(scope, err) :: console.error @ 'router', scope, err

  async publishRoute(route) ::
    await route.ready
    const id_route = route.id_route
    if 'string' === typeof id_route ::
      this.public_routes.set @ id_route, route
      return route

  setUpstream(upstream, opt) ::
    if null != opt :: this.upstream_opt = opt

    return this.upstream = as_func @
      upstream.dispatch || upstream.send || upstream

  upstreamRoute(id_route) ::
    const { upstream, upstream_opt } = this
    if upstream ::
      this.addDynamic @ id_route, upstream, upstream_opt


  async discoverRoute(id_route, rtrctx) ::
    await this._discoverFirst @:
      key: id_route, id_route, kind: 'route', rtrctx


  addPeer(id_route, channel, opt) ::
    const disp = channel.dispatch || channel.send
    const res = this.addRoute @ id_route, disp, opt
    if channel.when_closed ::
      channel.when_closed.then @ res.cancel
    return res

  addDynamic(id_route, route, opt) ::
    return is_func(route)
      ? this.addRoute(id_route, route, opt)
      : this.addPeer(id_route, route, opt)

  /* // from bindCoreRouterAPI

  addRoute(id_route, route, override) : [route, bound removeRoute]
  removeRoute(id_route, route) : Boolean
  removeRoute({id_route}) : Boolean

  hasRoute(id_route) : Boolean

  dispatch(pkt, channel) : Promise
  resolveRoute(id_route, allowDiscover, allowUpstream) : route function

  */



o_assign @ FabricRouter.prototype, channel_kinds, @{}
  upstream_opt: @{} ms_ttl: 60000
  
