import {createECDH, createHmac} from 'crypto'
import {pack_hello, pack_ping, dispControlByType as channelSetupByType} from './channel_setup'

export class MessageRouter ::
  constructor() ::
    var id_self, ec_pub_id, ec_id_hmac
    while ! id_self :: // create a closure over the EC private credentials
      let ec_priv_id = createECDH('prime256v1')
      ec_pub_id = ec_priv_id.generateKeys(null, 'compressed')
      id_self = ec_pub_id.readUInt32LE(8) // read id from offset 8 to 12
      ec_id_hmac = function (ec_pub_other, reverse) ::
        const secret = ec_priv_id.computeSecret(ec_pub_other)
        return createHmac('sha256', secret)
          .update @ reverse ? ec_pub_other : ec_pub_id
          .digest()

    const dispatch = this._initDispatch(id_self, this.routes)

    return Object.defineProperties @ this, @:
      id_self: @: value: id_self
      ec_pub_id: @: value: ec_pub_id
      dispatch: @: value: dispatch
      ec_id_hmac: @: value: ec_id_hmac


  // --- Dispatch core ---

  _initDispatch(id_self, routes) ::
    routes.set @ 0, this.bindDispatchControl()
    routes.set @ id_self, this.bindDispatchSelf()
    const dispatch_one = this.bindDispatchRoute()

    const pqueue = this.promiseQueue()
    return (msgList, sendMsgRaw) => ::
      const pq = pqueue() // pq will dispatch during Promise resolutions
      for const msg of msgList ::
        pq.then @ () => dispatch_one(msg, sendMsgRaw)

  on_error_in_dispatch(err, msg) ::
    console.error @ 'Error during msg dispatch\n  msg:', msg, '\n', err, '\n'


  // --- Dispatch to route ---

  dispatch_unknown_route(id_router, msg) ::
    console.log @ 'TODO: implement dispatch_unknown_route', msg
  bindDispatchRoute() ::
    return (msg, sendMsgRaw) => ::
      try ::
        const id_router = msg.id_router
        const dispatch_route = this.routes.get(id_router)
        if undefined !== dispatch_route ::
          if false === dispatch_route(msg, sendMsgRaw) ::
            this.unregisterRoute(id_router)
        else ::
          this.dispatch_unknown_route(id_router, msg)
      catch err ::
        this.on_error_in_dispatch(err, msg, sendMsgRaw)


  routes = new Map()
  registerRoute(id_router, dispatch_route) ::
    if 'function' !== typeof dispatch_route ::
      throw new TypeError @ `Expected 'dispatch_route' to be a function`
    if this.routes.has @ id_router ::
      return false
    this.routes.set @ id_router, dispatch_route
    return true
  unregisterRoute(id_router) ::
    return this.routes.delete @ id_router

  imposterPeerRoute(id_router, sendMsgRaw) ::
  registerPeerRoute(id_router, sendMsgRaw) ::
    if 0 === id_router ::
      return false
    else if this.id_self === id_router ::
      return false
    return this.registerRoute @ id_router, msg => ::
      if 0 !== msg.ttl :: sendMsgRaw(msg)


  // --- Dispatch to local target

  dnu_dispatch_self(msg) ::
  bindDispatchSelf(msg) ::
    return (msg, sendMsgRaw) => ::
      const id_target = msg.id_target
      const target = this.targets.get(id_target)
      if undefined === target ::
        this.dnu_dispatch_self(msg)
      else if false === target(msg, this) ::
        this.unregisterTarget(id_target)

  targets = new Map()
  registerTarget(id_target, target) ::
    if 'function' !== typeof target ::
      throw new TypeError @ `Expected 'target' to be a function`
    if this.targets.has @ id_target ::
      return false
    return this.targets.set @ id_target, target
  unregisterTarget(id_target) ::
    return this.targets.delete @ id_target



  // --- Dispatch control messages

  bindDispatchControl() ::
    return (msg, sendMsgRaw) => ::
      const handler = this.dispControlByType[msg.type]
      if undefined !== handler ::
        handler(this, msg, sendMsgRaw)
      else
        this.dnu_dispatch_control(msg, sendMsgRaw)

  dispControlByType = Object.create @ this.dispControlByType
  dnu_dispatch_control(msg, sendMsgRaw) ::
    console.warn @ 'dnu_dispatch_control', msg.type, msg


  // --- Control message utilities

  sendRoutingHandshake(sendMsgRaw, ...args) ::
    return sendMsgRaw @ pack_hello(this.ec_pub_id), ...args
  sendPing(sendMsgRaw, ...args) ::
    return sendMsgRaw @ pack_ping(), ...args


MessageRouter.prototype.dispControlByType = Object.assign @ {}
  channelSetupByType

Object.assign @ MessageRouter.prototype, @{}
  promiseQueue
export default MessageRouter



function promiseQueue(nextPromise=() => Promise.resolve()) ::
  let tip = null
  return function () ::
    if null === tip ::
      tip = nextPromise()
      tip.then @ clear_tip
    return tip

  function clear_tip() ::
    tip = null

