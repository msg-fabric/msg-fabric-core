import { FabricBase } from './utils.jsy'
import { bindCoreRouterAPI } from './router_core.jsy'
import { base_channel, channel_kinds } from './channel.jsy'

export class FabricRouter extends FabricBase ::
  constructor() ::
    super()

    Object.defineProperties @ this, @{}
      _channel_: @{} value: @{} __proto__: base_channel, router: this
      routeDiscovery: @{} value: this._discoveryDefault.slice()

    if this._skip_bind_api :: return this

    const self = Object.create(this)
    Object.assign @ this,
      bindCoreRouterAPI @ self, this._initRoutes()
    return self

  _initRoutes() :: return new Map()

  upstreamRoute(id_route) ::
    return this.addDynamic @ id_route, this.upstream

  async discoverRoute(id_route) ::
    let lstDiscovery = this.routeDiscovery
    if 0 === lstDiscovery.length :: return

    const route = await this._discoverFirst @
      lstDiscovery.concat @# this._discoveryTimeout()
      @{} key: id_route, id_route
      err => this._on_error @ 'router.discovery', err

    return this.addDynamic @ id_route, route


  addPeer(id_route, channel, override) ::
    let disp = channel.dispatch
    if null == disp ::
      disp = pkt => :: channel.send(pkt)
      Object.defineProperty @ channel, 'dispatch', {value: disp}
    if undefined !== channel.when_closed ::
      channel.when_closed.then @=>
        this.removeRoute @ id_route, disp
    return this.addRoute @ id_route, disp, override

  addDynamic(id_route, route) ::
    if 1 === arguments.length ::
      route = id_route.route || id_route
      id_route = id_route.id_route

    if null == route :: return
    if route.ephemeral :: return route

    return 'function' === typeof route
      ? this.addRoute(id_route, route, true)
      : this.addPeer(id_route, route, true)


  /* // from bindCoreRouterAPI

  addRoute(id_route, route, override) : route function
  addRoute({id_route, route, override}) : route function
  addRoute(route function with id_route property) : route function

  removeRoute(id_route, route) : Boolean
  removeRoute(route function with id_route property) : Boolean

  hasRoute(id_route) : Boolean

  dispatch(pkt, channel) : Promise
  resolveRoute(id_route, allowDiscover, allowUpstream) : route function

  */


Object.assign @ FabricRouter.prototype, channel_kinds

export default FabricRouter

