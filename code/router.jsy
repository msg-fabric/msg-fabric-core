import {dispControlByType} from './control_protocol'

export class MessageRouter ::
  constructor(id_self) ::
    if id_self ::
      Object.defineProperties @ this, @: id_self: @: value: id_self
      this._initDispatch()

  // --- Dispatch core ---

  _initDispatch() ::
    const routes = this._createRoutesMap()
    routes.set @ 0, this.bindDispatchControl()
    if null != this.id_self ::
      routes.set @ this.id_self, this.bindDispatchSelf()

    const pqueue = promiseQueue()
    const dispatch_one = this.bindDispatchRoute(routes)
    return Object.defineProperties @ this, @:
      routes: @: value: routes
      dispatch: @: value: dispatch

    function dispatch(msgList, channel) ::
      const pq = pqueue() // pq will dispatch during Promise resolutions
      return msgList.map @ msg =>
        pq.then @ () => dispatch_one(msg, channel)

  on_error_in_dispatch(err, msg) ::
    console.error @ 'Error during msg dispatch\n  msg:', msg, '\n', err, '\n'

  _createRoutesMap() :: return new Map()

  // --- Dispatch to route ---

  _routeDiscovery = []
  dispatch_discover_route(id_router, msg) ::
    const tip = Promise.resolve(id_router)
    // TODO: Promise.race might return the first nullâ€¦ dang.
    return Promise.race @
      this._routeDiscovery.map @
        discover => tip.then @ discover

  bindDispatchRoute(routes) ::
    return async (msg, channel) => ::
      try ::
        const id_router = msg.id_router
        let dispatch_route = routes.get(id_router)
        if undefined === dispatch_route ::
          dispatch_route = await this.dispatch_discover_route(id_router, msg)
          if null == dispatch_route :: return
          this.registerRoute(id_router, dispatch_route)

        if false === dispatch_route(msg, channel) ::
          this.unregisterRoute(id_router)
      catch err ::
        this.on_error_in_dispatch(err, msg, channel)


  registerRoute(id_router, dispatch_route) ::
    if 'function' !== typeof dispatch_route ::
      if null != dispatch_route ::
        throw new TypeError @ `Expected 'dispatch_route' to be a function`
      else return false
    if this.routes.has @ id_router :: return false
    if 0 === id_router :: return false
    if this.id_self === id_router :: return false

    this.routes.set @ id_router, dispatch_route
    return true
  unregisterRoute(id_router) ::
    return this.routes.delete @ id_router
  registerPeerRoute(id_router, channel) ::
    return this.registerRoute @ id_router, msg => ::
      if 0 !== msg.ttl :: channel.sendRaw(msg)
  verifiedPeerRoute(id_router, channel) ::
    return this.registerPeerRoute(id_router, channel)
  unverifiedPeerRoute(id_router, channel) ::
    if this.allowUnverifiedRoutes || channel.allowUnverifiedRoutes ::
      return this.registerPeerRoute(id_router, channel)
    else console.warn @ 'Unverified peer route (ignored):', @: id_router, channel


  // --- Dispatch to local target

  dnu_dispatch_self(msg) ::
  bindDispatchSelf(msg) ::
    return async (msg, channel) => ::
      const id_target = msg.id_target
      let target = this.targets.get(id_target)
      if undefined === target ::
        target = await this.dnu_dispatch_self(msg)
        if null == target :: return

      if false === target(msg, this) ::
        this.unregisterTarget(id_target)

  _createTargetsMap() :: return new Map()
  targets = this._createTargetsMap()
  registerTarget(id_target, target) ::
    if 'function' !== typeof target ::
      throw new TypeError @ `Expected 'target' to be a function`
    if this.targets.has @ id_target ::
      return false
    return this.targets.set @ id_target, target
  unregisterTarget(id_target) ::
    return this.targets.delete @ id_target



  // --- Dispatch control messages

  bindDispatchControl() ::
    return (msg, channel) => ::
      const handler = this.dispControlByType[msg.type]
      if undefined !== handler ::
        handler(this, msg, channel)
      else
        this.dnu_dispatch_control(msg, channel)

  dispControlByType = Object.create @ this.dispControlByType
  dnu_dispatch_control(msg, channel) ::
    console.warn @ 'dnu_dispatch_control', msg.type, msg


MessageRouter.prototype.dispControlByType = Object.assign @ {}
  dispControlByType

export default MessageRouter


function promiseQueue() ::
  let tip = null
  return function () ::
    if null === tip ::
      tip = Promise.resolve()
      tip.then @ clear_tip
    return tip

  function clear_tip() ::
    tip = null

