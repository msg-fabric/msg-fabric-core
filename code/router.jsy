import {createECDH, createHmac} from 'crypto'
import {pack_hello, dispControlByType as channelSetupByType} from './channel_setup'

export class MessageRouter ::
  constructor() ::
    var id_self, ec_pub_id, ec_id_hmac
    while ! id_self :: // create a closure over the EC private credentials
      let ec_priv_id = createECDH('prime256v1')
      ec_pub_id = ec_priv_id.generateKeys(null, 'compressed')
      id_self = ec_pub_id.readUInt32LE(8) // read id from offset 8 to 12
      ec_id_hmac = function (ec_pub_other, reverse) ::
        const secret = ec_priv_id.computeSecret(ec_pub_other)
        return createHmac('sha256', secret)
          .update @ reverse ? ec_pub_other : ec_pub_id
          .digest()

    const dispatch = this.bindDispatchClosure(id_self)

    return Object.defineProperties @ this, @:
      id_self: @: value: id_self
      ec_pub_id: @: value: ec_pub_id
      dispatch: @: value: dispatch
      ec_id_hmac: @: value: ec_id_hmac

  bindDispatchClosure(id_self) ::
    const dispatch_one = (msg, sendMsgRaw) => ::
      try ::
        const id_router = msg.id_router

        if id_self === id_router ::
          const id_target = msg.id_target
          const target = this.targets.get(id_target)
          if undefined === target ::
            this.dnu_dispatch_self(msg)
          else if false === target(msg, this) ::
            this.unregisterTarget(id_target)

        else if 0 !== id_router ::
          const relayMsgRaw = this.routes.get(id_router)
          if 0 >= msg.ttl :: return

          if undefined === relayMsgRaw ::
            this.dispatch_unknown_route(id_router, msg)
          else if false === relayMsgRaw(msg) ::
            this.unregisterRoute(id_router)

        else :: // 0 === id_router // control message
          const handler = this.dispControlByType[msg.type]
          if undefined === handler ::
            this.dnu_dispatch_control(msg, sendMsgRaw)
          else handler(this, msg, sendMsgRaw)
      catch err ::
        this.on_error_in_dispatch(err, msg, sendMsgRaw)

    const pqueue = this.promiseQueue()
    return (msgList, sendMsgRaw) => ::
      const pq = pqueue() // pq will dispatch during Promise resolutions
      for const msg of msgList ::
        pq.then @ () => dispatch_one(msg, sendMsgRaw)


  on_error_in_dispatch(err, msg) ::
    console.error @ 'Error during msg dispatch\n  msg:', msg, '\n', err, '\n'

  dnu_dispatch_self(msg) ::
    console.warn @ 'dnu_dispatch_self', msg.id_target.toString(16), msg
  targets = new Map()
  registerTarget(id_target, target) ::
    if 'function' !== typeof target ::
      throw new TypeError @ `Expected 'target' to be a function`
    if this.targets.has @ id_target ::
      return false
    console.log @ `add target: ${this.id_self}/${id_target}`
    return this.targets.set @ id_target, target
  unregisterTarget(id_target) ::
    console.log @ `remove target: ${this.id_self}/${id_target}`
    return this.targets.delete @ id_target

  dispatch_unknown_route(id_router, msg) ::
    console.log @ 'TODO: implement dispatch_unknown_route', msg

  routes = new Map()
  registerRoute(id_router, sendMsgRaw) ::
    if 'function' !== typeof sendMsgRaw ::
      throw new TypeError @ `Expected 'sendMsgRaw' to be a function`
    if this.routes.has @ id_router ::
      return false
    console.log @ `add peer: ${id_router} <==> ${this.id_self}`
    this.routes.set @ id_router, sendMsgRaw
  unregisterRoute(id_router) ::
    console.log @ `remove peer: ${id_router} <==> ${this.id_self}`
    return this.routes.delete @ id_router
  imposterRoute(id_router) ::

  sendRoutingHandshake(sendMsgRaw) ::
    if 'function' !== typeof sendMsgRaw ::
      throw new TypeError @ `Expected 'sendMsgRaw' to be a function`
    sendMsgRaw @ pack_hello @ this.ec_pub_id


  dispControlByType = Object.create @ this.dispControlByType
  dnu_dispatch_control(msg, sendMsgRaw) ::
    console.warn @ 'dnu_dispatch_control', msg.type, msg



MessageRouter.prototype.dispControlByType = Object.assign @ {}
  channelSetupByType

Object.assign @ MessageRouter.prototype, @{}
  promiseQueue
export default MessageRouter



function promiseQueue(nextPromise=() => Promise.resolve()) ::
  let tip = null
  return function () ::
    if null === tip ::
      tip = nextPromise()
      tip.then @ clear_tip
    return tip

  function clear_tip() ::
    tip = null

