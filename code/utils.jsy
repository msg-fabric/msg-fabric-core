import { o_assign, o_defprop, is_func, as_func } from './builtins.jsy'
import data_utils from './data_utils.jsy'

const _discover_cache = new WeakMap()
export function discoverFirst(host, lstFns, query) ::
  let cache_belt = _discover_cache.get(lstFns)
  if undefined === cache_belt ::
    cache_belt = host._discoveryCache()
    _discover_cache.set(lstFns, cache_belt)

  const key = query.key
  for const cache of cache_belt ::
    const p = cache[key]
    if undefined !== p ::
      return p

  const p = _discoverFirst(host, lstFns, query)
  cache_belt[0][key] = p
  return p

function _discoverFirst(host, lstFns, query) ::
  let p_search
  return p_search = new Promise @ async resolve => ::
    await null
    o_assign @ query, @{} host, p_search, done: false

    const done = e => ::
      query.done = true
      resolve @ e && true !== e ? e : null

    const resolveFirst = async fn_discover => ::
      const e = await fn_discover(query)
      if undefined !== e :: done(e)

    host._discoveryTimeout(done)
    try ::
      for const p of Array.from @ lstFns, resolveFirst ::
        await p

      done(null)
    catch err ::
      host._on_error('discovery', err)


const discoveryTest = @{}
  'function': accept => accept
  'string': accept => q => q.key.startsWith(accept)
  'object'(accept) ::
    if is_func @ accept.test ::
      return q => accept.test(q.key)


export class DiscoveryBase ::
  constructor() ::
    this.discovery = (this.discovery || []).slice()

  addDiscovery(accept, fn_discover) ::
    const lst = this.discovery
    if undefined === fn_discover ::
      lst.push @ as_func @ accept

    else ::
      accept = discoveryTest[typeof accept](accept)
      lst.push @\ q => accept(q) ? fn_discover(q) : undefined

  async _discoverFirst(query) ::
    const lstFns = this.discovery
    if 0 !== lstFns.length ::
      return discoverFirst @ this, lstFns, query

  _discoveryCache() :: return this.timeouts.hashbelt(15000)
  _discoveryTimeout(resolve) :: return this.timeouts(2000, resolve)


export function bindTimeouts(ms_interval) ::
  const p0 = Promise.resolve(), p_then = p0.then.bind(p0)
  const q = []

  tick_interval(ms_interval, q)
  o_assign @ add, @{}
    interval

    absent: (ms_min_timeout, callback, value) =>
      add @ ms_min_timeout, @=> callback @
        is_func(value) ? value() : value

    hashbelt: (ms_min_interval, max_length=4, create=Object) => ::
      interval @ ms_min_interval, @=> ::
        while max_length <= belt.length ::
          belt.pop()
        belt.unshift @ create()

      const belt = [create()]
      return belt

    ttl(ms_min_interval, ... cleanup_fns) ::
      return @{}
        extend: false
        reset() :: this.extend = true; return this
        with_reset(fn) :: return (...args) => @ this.reset(), fn(...args)

        cancel: interval @ ms_min_interval || 60000, cancel => ::
          if this.extend ::
            this.extend = false
            return

          for const cleanup of cleanup_fns ::
            if cleanup && ! this.extend ::
              cleanup(this)

          if ! this.extend ::
            cancel()

  return add.add = add


  function add(ms_min_timeout, callback) ::
    if callback ::
      const idx = Math.max @ 1, Math.ceil @ (0|ms_min_timeout) / ms_interval
      const qi = q[idx] || []
      if 0 === qi.length :: q[idx] = qi
      qi.push @ as_func @ callback

  function interval(ms_min_interval, callback) ::
    as_func(callback)
    const cancel = @=> :: interval = null
    let interval = @=> ::
      callback(cancel)
      add @ ms_min_interval, interval

    add @ ms_min_interval, interval
    return cancel

  function tick_interval(ms, lq) ::
    ms_interval = (0 | ms) || 67

    const tick = function () ::
      const tip = lq.shift()
      if tip :: tip.forEach @ p_then
      else if lq !== q && 0 === lq.length ::
        clearInterval(tid) // done

    const tid = setInterval @ tick, ms_interval
    if tid.unref :: tid.unref()

    add.changeInterval = ms => ::
      if ms_interval != ms ::
        // fork and finish current queue
        if 0 !== lq.length ::
          lq = lq.splice(0, lq.length)
        else clearInterval(tid)

        // start using new interval
        tick_interval(ms, q)

      return add



export const cmpPlugins = (a, b) => (0 | a && a.order) - (0 | b && b.order)
export function applyPlugins(key, pluginList, ...args) ::
  if ! key :: key = null
  for let plugin of pluginList ::
    if ! plugin :: continue
    if null !== key ::
      plugin = plugin[key]
    if is_func @ plugin ::
      plugin(...args)

