export const dispControlByType = @{}
  [0xf0]: recv_hello
  [0xf1]: recv_olleh
  [0xfe]: recv_pong
  [0xff]: recv_ping



export function send_hello(channel) ::
  const {ec_pub_id} = channel.router
  return channel.packAndSendRaw @:
    id_router: 0, type: 0xf0
    header: ec_pub_id
    body: channel.hub.id_router_self()

function recv_hello(router, msg, channel) ::
  const ec_other_id = msg.header_buffer()
  if 0 !== ec_other_id.length && router.ec_id_hmac ::
    const hmac_secret = router.ec_id_hmac
      ? router.ec_id_hmac(ec_other_id) : null
    send_olleh @ channel, hmac_secret

  else ::
    const id_router = msg.unpackId(msg.body_buffer(), 0)
    router.unverifiedPeerRoute @ id_router, channel


function send_olleh(channel, hmac_secret) ::
  const {ec_pub_id} = channel.router
  return channel.packAndSendRaw @:
    id_router: 0, type: 0xf1
    header: ec_pub_id
    body: hmac_secret

function recv_olleh(router, msg, channel) ::
  const ec_other_id = msg.header_buffer()
  const id_router = msg.unpackId(ec_other_id)

  const hmac_secret = router.ec_id_hmac
    ? router.ec_id_hmac(ec_other_id, true) : null
  const peer_hmac_claim = msg.body_buffer()
  if hmac_secret && 0 === hmac_secret.compare @ peer_hmac_claim ::
    router.verifiedPeerRoute @ id_router, channel
  else ::
    router.unverifiedPeerRoute @ id_router, channel



export function send_pingpong(channel, pong) ::
  return channel.packAndSendRaw @:
    id_router: 0, type: pong ? 0xfe : 0xff
    body: new Date().toISOString()

function recv_pong(router, msg, channel) ::
  const local = new Date()

  try ::
    const remote = new Date @ msg.body_buffer().toString()
    const delta = remote - local
    channel.ts_pong = @{} delta, remote, local
  catch err ::
    channel.ts_pong = @{} local

function recv_ping(router, msg, channel) ::
  const local = new Date()

  send_pingpong @ channel, true

  try ::
    const remote = new Date @ msg.body_buffer().toString()
    const delta = remote - local
    channel.ts_ping = @{} delta, remote, local
  catch err ::
    channel.ts_ping = @{} local

