import {URL} from 'url'
import {packetStreamParser} from './parser'
import {MessageRouter} from './router'
import {MessageChannel} from './channel'

export class MessageHub ::
  constructor() ::
    const router = this._init_router()
    const _packetStream = this._init_packetStreamParser()
    const _api_channel = this._init_channelAPI(router, _packetStream)
    const _api_internal = this._init_internalAPI(router, _packetStream)
    Object.defineProperties @ this, @{}
      router: @{} value: router
      _packetStream: @{} value: _packetStream
      _api_channel: @{} value: _api_channel
      _api_internal: @{} value: _api_internal

    if this.pluginList ::
      this.plugin @ ... this.pluginList

  _init_router() ::
    return new MessageRouter()

  _init_packetStreamParser() ::
    return packetStreamParser()
  _init_channelAPI(router, packetStream) ::
    return MessageChannel.asChannelAPI @
      this, router, packetStream
  _init_internalAPI(router, packetStream) ::
    return MessageChannel.asInternalAPI @
      this, router, packetStream

  plugin(...pluginFunctions) ::
    for const plugin of pluginFunctions ::
      plugin(this)
    return this

  static plugin(...pluginFunctions) ::
    const pluginList = [].concat @
      this.prototype.pluginList || []
      pluginFunctions

    const BaseHub = this._BaseHub_ || MessageHub
    class MessageHub_PI extends BaseHub ::
    Object.defineProperties @ MessageHub_PI.prototype, @:
      pluginList: @{} value: Object.freeze @ pluginList
    Object.defineProperties @ MessageHub_PI, @:
      _BaseHub_: @{} value: BaseHub
    return MessageHub_PI


  connect_self() ::
    return Object.create @ this._api_internal

  _connectByProtocol = new Map() // provided by pluginsâ€¦
  connect(conn_url) ::
    if null == conn_url ::
      return this.connect_self()

    if 'string' === typeof conn_url ::
      conn_url = new URL(conn_url)

    const connect = this._connectByProtocol.get(conn_url.protocol)
    if connect ::
      return connect(conn_url)
    else throw new Error @ `Connection protocol "${conn_url.protocol}" not registered for "${conn_url.toString()}"`


  on_connect_peer(sendMsgRaw) ::
    this.router.sendRoutingHandshake(sendMsgRaw)
    return this

