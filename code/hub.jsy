import { o_assign, o_create, o_freeze, as_func } from './builtins.jsy'
import { random_base64, parse_url, data_utils } from './data_utils.jsy'

import FabricRouter_Base from './router.jsy'
import TargetRouter_Base from './targets.jsy'

import { applyPlugins, cmpPlugins } from './utils.jsy'

export class FabricHub ::
  static create(...args) :: return new this(...args)

  constructor(options) ::
    const self = o_create(this)

    if null == options :: options = {}
    else if 'object' !== typeof options ::
      options = @{} id_route: options
    this.options = options


    applyPlugins @ 'pre', this._plugins_, self

    const router = self._initHubRouter(options)
    const loopback = router.loopback
    o_assign @ this, @{}
      _root_: this
      router, loopback, send: loopback.send,
      _url_protos: {}

    this.local = self._initLocal(options)

    applyPlugins @ null, this._plugins_, self
    applyPlugins @ 'post', this._plugins_, self
    return self

  _initHubRouter(options) ::
    return new this.constructor.FabricRouter(this)
  _initLocal(options) ::
    return this.localRoute(options.id_route)

  localRoute(id_route, is_private) ::
    if null == id_route :: id_route = this.newRouteId()
    const local = new this.constructor.TargetRouter @
      id_route, this.router, this

    if ! is_private :: this.router.publishRoute(local)
    return local

  newRouteId() ::
    const id = random_base64(5).slice(0, 6)
    const prefix = this.options.id_prefix
    return undefined === prefix ? id : prefix+id


  async connectUpstream(upstream) ::
    upstream = await upstream
    let res = this.router.setUpstream(upstream)
    if ! res ::
      upstream = await this.connect(upstream)
      res = this.router.setUpstream(upstream)
      if ! res :: throw new TypeError()

    await upstream.peer_info
    return upstream

  connect(conn_url) ::
    if ! conn_url.protocol ::
      conn_url = parse_url @
        conn_url.asURL ? conn_url.asURL() : ''+conn_url

    const connect = this._url_protos[conn_url.protocol]
    if ! connect ::
      throw new Error @ `Connection protocol "${conn_url.protocol}" not found`
    return connect(conn_url)

  registerProtocols(protocolList, cb_connect) ::
    as_func(cb_connect)
    for const protocol of protocolList ::
      this._url_protos[protocol] = cb_connect
    return this


  // --- plugin support ---

  livePlugin(... _plugins_) ::
    _plugins_.sort(cmpPlugins)

    applyPlugins @ 'live', _plugins_, this
    applyPlugins @ null, _plugins_, this
    applyPlugins @ 'post', _plugins_, this
    return this

  static plugin(... _plugins_) ::
    _plugins_ = o_freeze @
      this._plugins_
        .concat @ _plugins_
        .sort @ cmpPlugins

    const inst_plugins = _plugins_.slice()

    class FabricRouter extends this.FabricRouter ::
    class TargetRouter extends this.TargetRouter ::

    class FabricHub extends this ::
    FabricHub.prototype._plugins_ = inst_plugins

    o_assign @ FabricHub, @{} _plugins_,
      FabricRouter, TargetRouter

    applyPlugins @ 'subclass', _plugins_, FabricHub, inst_plugins
    inst_plugins.sort @ cmpPlugins
    return FabricHub


o_assign @ FabricHub.prototype, @{}
  is_fabric_hub: true
  _plugins_: o_freeze([])
  data_utils

  /* Plugin Provided (plugin/standard or similar):

       stream_codec: @{}
         encode(pkt) : pkt_data
         decode(pkt_data) : pkt

       p2p: @{}
        hello(ms_timeout=500) : Promise of peer_info
        peerRoute(pkt, pktctx) : awaitable

  */

o_assign @ FabricHub, @{}
  _plugins_: o_freeze([])
  FabricRouter: FabricRouter_Base
  TargetRouter: TargetRouter_Base

export default FabricHub
