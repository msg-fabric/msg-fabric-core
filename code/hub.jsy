import {MessageRouter} from './router.jsy'
import {MessageChannel} from './channel.jsy'

export class MessageHub ::
  constructor() ::
    applyPlugins @ 'pre', this.pluginList, this

    const router = this._init_router()
    const _packetParser = this._init_packetParser()
    const _api_channel = this._init_channelAPI(router, _packetParser)
    const _api_internal = this._init_internalAPI(router, _packetParser)
    Object.defineProperties @ this, @{}
      router: @{} value: router
      _packetParser: @{} value: _packetParser
      _api_channel: @{} value: _api_channel
      _api_internal: @{} value: _api_internal

    applyPlugins @ null, this.pluginList, this
    applyPlugins @ 'post', this.pluginList, this
    return this

  _init_router() :: throw new Error @ `Plugin responsiblity`
  _init_packetParser() :: throw new Error @ `Plugin responsiblity`

  _init_channelAPI(router, packetParser) ::
    return MessageChannel.asChannelAPI @
      this, router, packetParser
  _init_internalAPI(router, packetParser) ::
    return MessageChannel.asInternalAPI @
      this, router, packetParser


  static plugin(...pluginFunctions) ::
    return this.plugins(...pluginFunctions)
  static plugins(...pluginFunctions) ::
    const pluginList = [].concat @
      this.prototype.pluginList || []
      pluginFunctions

    const BaseHub = this._BaseHub_ || this
    class MessageHub_PI extends BaseHub ::
    Object.defineProperties @ MessageHub_PI.prototype, @:
      pluginList: @{} value: Object.freeze @ pluginList
    Object.defineProperties @ MessageHub_PI, @:
      _BaseHub_: @{} value: BaseHub

    applyPlugins @ 'subclass', pluginList, MessageHub_PI, @: MessageRouter, MessageChannel
    return MessageHub_PI


  get id_self() ::
    return this.router.id_self
  id_router_self() ::
    return this._packetParser.packId @
      this.router.id_self
  connect_self() ::
    return this._api_internal.clone()

  connect(conn_url) ::
    if null == conn_url ::
      return this.connect_self()

    if 'string' === typeof conn_url ::
      conn_url = this._parseConnectURL(conn_url)

    const connect = this._connectByProtocol[conn_url.protocol]
    if ! connect ::
      throw new Error @ `Connection protocol "${conn_url.protocol}" not registered for "${conn_url.toString()}"`

    return connect(conn_url)

  registerConnectionProtocol(protocol, cb_connect) ::
    if 'function' !== typeof cb_connect ::
      throw new TypeError @ `Expected 'cb_connect' function`
    const byProtocol = Object.assign @ {}, this._connectByProtocol
    byProtocol[protocol] = cb_connect
    return Object.defineProperty @ this, '_connectByProtocol',
      @: value: byProtocol, configurable: true

  _parseConnectURL(conn_url) ::
    return new URL(conn_url)

export default MessageHub

export function applyPlugins(key, pluginList, ...args) ::
  if ! key :: key = null
  for let plugin of pluginList ::
    if null !== key :: plugin = plugin[key]
    if 'function' === typeof plugin ::
      plugin(...args)
