import {packetStreamParser} from './parser'
import {pack_hello} from './channel_setup'
import {MessageRouter} from './router'

export class PacketMessageHub ::
  constructor() ::
    const router = this._init_router()
    Object.defineProperties @ this, @{}
      router: @{} value: router
      id_self: @{} value: router.id_self
      _packetStream: @{} value: packetStreamParser()

  _init_router() :: return new MessageRouter()

  _send_routing_handshake(sendMsgRaw) ::
    if 'function' !== typeof sendMsgRaw ::
      throw new TypeError @ `Expected 'sendMsgRaw' to be a function`

    const msg_hello = pack_hello @ this.router.ec_pub_id
    sendMsgRaw @ msg_hello

  on_connect_peer(stream, sendMsgRaw) ::
    this._send_routing_handshake(sendMsgRaw)

    const dispatch = this.router.dispatch
    return connectPacketStream @
      this._packetStream.clone(), stream
      msgList => dispatch @ msgList, sendMsgRaw


export function connectPacketStream(pktParser, stream, on_recv_messages) ::
  return new Promise @ (resolve, reject) => ::
    stream.on @ 'error', shutdown
    stream.on @ 'close', shutdown
    stream.on @ 'data', data => ::
      try ::
        var msgList = pktParser.feed @ data
        if 0 < msgList.length ::
          on_recv_messages(msgList)
      catch err ::
        return shutdown(err)


    function shutdown(err) ::
      if undefined === stream :: return
      pktParser = undefined
      stream.end()
      stream = undefined

      err ? reject(err) : resolve()

