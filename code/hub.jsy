import FabricRouter_Base from './router.jsy'
import TargetRouter_Base from './targets.jsy'

import {applyPlugins} from './utils.jsy'

export class FabricHub ::
  static create() :: return new this()

  constructor() ::
    applyPlugins @ 'pre', this.pluginList, this

    const router = this._init_fabricRouter()
    const local = this.createLocalRoute(router)

    Object.defineProperties @ this, @{}
      dispatch: @{} value: router.dispatch
      router: @{} value: router
      local: @{} value: local

      _connectByProtocol: @{} value: {}

    applyPlugins @ null, this.pluginList, this
    applyPlugins @ 'post', this.pluginList, this
    return this


  _init_fabricRouter() ::
    const klass = this.constructor
    return new klass.FabricRouter()

  createLocalRoute(router=this.router) ::
    const klass = this.constructor
    return new klass.TargetRouter @
      this._newRouteId(), router
  //_newRouteId() :: throw new Error @ `subclass responsiblity`


  connect(conn_url) ::
    if null == conn_url ::
      return this._api_internal.clone()

    if 'string' === typeof conn_url ::
      conn_url = this._parseConnectURL(conn_url)

    const connect = this._connectByProtocol[conn_url.protocol]
    if ! connect ::
      throw new Error @ `Connection protocol "${conn_url.protocol}" not registered`
    return connect(conn_url)

  _parseConnectURL(conn_url) :: return new URL(conn_url)
  registerConnectionProtocol(protocol, cb_connect) ::
    if 'function' !== typeof cb_connect ::
      throw new TypeError @ `Expected 'cb_connect' function`
    this._connectByProtocol[protocol] = cb_connect
    return this


  send(...objs) ::
    const pktList = objs.map @ this._fromObjPacket
    return this.dispatch @ pktList, this._hub_channel_
  _fromObjPacket(obj) :: return obj // plugin (pkt) responsiblity


  static plugin(...pluginFunctions) ::
    return this.plugins(...pluginFunctions)
  static plugins(...pluginFunctions) ::
    const pluginList = Object.freeze @
      this.prototype.pluginList
        .concat @ pluginFunctions
        .sort @ (a, b) => (0 | a.order) - (0 | b.order)

    class FabricHub_PI extends this ::
    Object.defineProperties @ FabricHub_PI.prototype, @{}
      pluginList: @{} value: pluginList

    class FabricRouter extends this.FabricRouter ::
    class TargetRouter extends this.TargetRouter ::
    Object.assign @ FabricHub_PI, @{}
      FabricRouter, TargetRouter

    applyPlugins @ 'subclass', pluginList, FabricHub_PI
    return FabricHub_PI


const _hub_channel_ = @{}
  undeliverable(pkt, mode) ::
    console.warn @ `Undeliverable[${mode}]: ${pkt.id_target} of ${pkt.id_router}`

Object.defineProperties @ FabricHub_PI.prototype, @{}
  pluginList: @{} value: Object.freeze([])
  _hub_channel_

Object.assign @ FabricHub, @{}
  FabricRouter: FabricRouter_Base
  TargetRouter: TargetRouter_Base

export default FabricHub
