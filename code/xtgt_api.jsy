
export function bindXTargetAPI(router_ctx) ::
  const xtgt_api = @{}
    __proto__: router_ctx
    // tgt_router: instance of some TargetRouter-like object
    // target: null || function (pkt, pktctx)
    // id: [id_route, id_target]

    is_active() ::
      return this.tgt_router.hasTarget @ this.id[1]

    enable(target) ::
      if undefined === target :: target = this.target
      this.tgt_router.addTarget @ this.id[1], target, this.target_opt

    disable() ::
      this.tgt_router.removeTarget @ this.id[1]

    use(target) ::
      this.enable @ this.target = target
      return this

    use_serial(target) ::
      let tip = Promise.resolve()
      return this.use @\ ...args ::
        const h = @=> target(...args)
        return tip = tip.then(h, h)


  const xresp_api = @{} __proto__: xtgt_api
    then(y,n) :: return this.ans.then(y,n)
    catch(f) :: return this.ans.catch(f)
    finally(f) :: return this.ans.finally(f)

    until(p) ::
      const cancel = this.tgt_router.cancelTarget @ this.id[1]
      p.then(cancel, cancel)
      this.ans = p
      return this

    untilReply(ms_timeout, absent, on_reply) ::
      this.reset = _bindUntilReply.apply(this, arguments)
      return this.reset()
    reset: _bindUntilReply()

  return @{} xresp_api, xtgt_api


  function _pkt_body(pkt) :: return pkt.body
  function _bindUntilReply(ms_timeout_p=1000, absent, on_reply) ::
    if undefined === on_reply ::
      on_reply = absent || _pkt_body
      absent = undefined

    return function(ms_timeout=ms_timeout_p) ::
      return this.until @
        new Promise @ resolve => ::
          this.enable @ pkt => resolve @ on_reply(pkt)

          if ms_timeout ::
            this.timeouts.absent @
              ms_timeout, resolve, absent

