
export function bindXTargetAPI(router_ctx) ::
  let xtgt_api = @{}
    __proto__: router_ctx
    // tgt_router: instance of some TargetRouter-like object
    // id: [id_route, id_target]

    get 0() :: return this.id[0]
    get 1() :: return this.id[1]

    with(opt) :: return @{} __proto__:this, ... opt


  let xresp_api = @{}
    __proto__: xtgt_api

    ms_timeout: 1000
    on_reponse: v => v[0].body
    absent: undefined

    async response(absent=this.absent) ::
      let xt = this.timeouts
      let res = await xt.race @
        this.ms_timeout, this.stream.next()

      return xt === res ? absent
        : this.on_reponse(res.value)

  return @{} xresp_api, xtgt_api

