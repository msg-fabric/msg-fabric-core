import { o_assign, o_create, is_func } from './builtins.jsy'
import { random_base64 } from './data_utils.jsy'
import { discoverFirst } from './utils.jsy'
import { bindCoreTargetAPI } from './targets_core.jsy'

export class TargetRouter ::

  constructor(id_route, router, hub) ::
    o_assign @ this, @{}
      targetDiscovery: (this.targetDiscovery || []).slice()
      timeouts: router.timeouts

    if this._skip_bind_api :: return this

    const self = o_create(this)
    o_assign @ this,
      bindCoreTargetAPI @ self, this._initTargets(), id_route, router
    return self

  _initTargets() :: return new Map()
  _on_error(scope, err) :: console.error @ 'target', scope, err

  newTargetId() :: return random_base64(6)

  async discoverTarget(id_target, pktctx) ::
    let lstDiscovery = this.targetDiscovery
    if 0 === lstDiscovery.length :: return

    const target = await discoverFirst @
      @{} key: id_target, kind: 'target', pktctx
      lstDiscovery, this

    if null == target :: return

    if ! target.ephemeral ::
      this.addTarget(id_target, target)
    return target

  _discoveryTimeout(resolve) :: return this.timeouts(2000, resolve)

  /* // from bindCoreTargetAPI

  ready : Promise<Boolean>

  addTarget(id_target, target, override) : {id_target, id_route}
  removeTarget(id_target) : Boolean
  removeTarget({id_target}) : Boolean

  getTarget(id_target) : function(pkt, pktctx)
  hasTarget(id_target) : Boolean

  xtgt(asReply, id_target) : target management object

  */

  addReply(ms_timeout=1000, absent) ::
    return this.xtgt(true).untilReply @
      ms_timeout, absent, _pkt_body

  async addEndpoint(ep) ::
    const eph = this.xtgt(ep.as_reply, ep.id_target || ep[1])
    const ready = await @
        ep.endpoint ? ep.endpoint(eph)
      : is_func(ep) ? ep(eph)
      : @ eph.use(ep.target.bind(ep)), true
    
    if is_func @ ready :: eph.use(ready)
    return false === ready ? null : eph.id

export default TargetRouter

function _pkt_body(pkt) :: return pkt.body
