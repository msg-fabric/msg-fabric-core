import { random_base64 } from './data_utils.jsy'
import { FabricBase } from './utils.jsy'
import { bindCoreTargetAPI } from './targets_core.jsy'

export class TargetRouter extends FabricBase ::

  constructor(id_route, router, hub) ::
    super()
    Object.defineProperties @ this, @{}
      targetDiscovery: @{} value: this._discoveryDefault.slice()

    const self = Object.create(this)
    if ! this._skip_bind_api ::
      Object.assign @ this,
        bindCoreTargetAPI @ self, this._initTargets(), id_route, router
    return self

  _initTargets() :: return new Map()

  newTargetId() :: return random_base64(6)
  createTarget(target) ::
    return this.addTarget(this.newTargetId(), target)

  async discoverTarget(id_target, pktctx) ::
    let lstDiscovery = this.targetDiscovery
    if 0 === lstDiscovery.length :: return

    const target = await this._discoverFirst @
      lstDiscovery.concat @# this._discoveryTimeout()
      @{} key: id_target, id_target, pktctx
      err => this._on_error @ 'target.discovery', err

    if null == target :: return

    if ! target.ephemeral ::
      this.addTarget(id_target, target)
    return target


  /* // from bindCoreTargetAPI

  addRoute(id_route, route, override) : route function
  addRoute({id_route, route, override}) : route function
  addRoute(route function with id_route property) : route function

  removeRoute(id_route, route) : route function
  removeRoute(route function with id_route property) : route function

  hasRoute(id_route) : Boolean

  dispatch(pkt, channel) : Promise
  resolveRoute(id_route, allowDiscover, allowUpstream) : route function

  */

export default TargetRouter
