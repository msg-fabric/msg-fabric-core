import { random_base64 } from './data_utils.jsy'
import { FabricBase, discoverFirst } from './utils.jsy'
import { bindCoreTargetAPI } from './targets_core.jsy'

export class TargetRouter extends FabricBase ::

  constructor(id_route, router, hub) ::
    super()
    Object.defineProperties @ this, @{}
      targetDiscovery: @{} value: this._discoveryDefault.slice()

    if this._skip_bind_api :: return this

    const self = Object.create(this)
    Object.assign @ this,
      bindCoreTargetAPI @ self, this._initTargets(), id_route, router
    return self

  _initTargets() :: return new Map()

  newTargetId() :: return random_base64(6)
  createTarget(target) ::
    return this.addTarget(this.newTargetId(), target)

  async discoverTarget(id_target, pktctx) ::
    let lstDiscovery = this.targetDiscovery
    if 0 === lstDiscovery.length :: return

    const target = await discoverFirst @
      lstDiscovery.concat @# this._discoveryTimeout()
      @{} key: id_target, id_target, pktctx
      err => this._on_error @ 'target.discovery', err

    if null == target :: return

    if ! target.ephemeral ::
      this.addTarget(id_target, target)
    return target


  /* // from bindCoreTargetAPI

  ready : Promise<Boolean>

  addTarget(id_target, target, override) : {id_target, id_route}
  addTarget({id_target, target, override}) : {id_target, id_route}
  addTarget(target function with id_target property) : {id_target, id_route}

  removeTarget(id_target) : Boolean
  removeTarget({id_target}) : Boolean
  removeTarget(target function with id_target property) : Boolean

  hasTarget(id_target) : Boolean

  addReply(ms_timeout=1000) : {id_target, id_route}

  */

export default TargetRouter
