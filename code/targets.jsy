import { o_assign, o_create  } from './builtins.jsy'
import { DiscoveryBase } from './discovery.jsy'
import { bindCoreTargetAPI } from './targets_core.jsy'

export class TargetRouter extends DiscoveryBase ::

  constructor(id_route, router, hub) ::
    super()
    let {randId} = hub, {timeouts, send, loopback} = router.router_ctx
    o_assign @ this, @{} timeouts, send, loopback, randId

    if this._skip_bind_api :: return this

    let self = o_create(this)
    o_assign @ this,
      bindCoreTargetAPI @ self, this._initTargets(), id_route, router
    return self

  _initTargets() :: return new Map()
  _on_error(scope, err) :: console.error @ 'target', scope, err

  newTargetId() :: return this.randId(4)

  async discoverTarget(id_target, rtrctx) ::
    await this._discoverFirst @:
      key: id_target, id_target, kind: 'target', rtrctx

  /* // from bindCoreTargetAPI

  ready : Promise<Boolean>

  addTarget(id_target, target, opt) : {id_target, id_route}
  removeTarget(id_target) : Boolean
  removeTarget({id_target}) : Boolean

  getTarget(id_target) : function(pkt, pktctx)
  hasTarget(id_target) : Boolean

  xresp(id_target) : target management object
  xtgt(id_target) : target management object

  */

  addReply(...args) :: return this.xresp().with(...args)

