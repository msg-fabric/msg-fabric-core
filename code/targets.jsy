import {FabricBase} from './utils.jsy'

export class TargetRouter extends FabricBase ::
  _createTargetsMap() :: return new Map()

  constructor(id_route, router) ::
    super()
    Object.defineProperties @ this, @{}
      id_route: @{} value: id_route, enumerable: true
      targetDiscovery: @{} value: []

    this._bindDispatchTarget(id_route, router)

  _bindDispatchTarget(id_route, router) ::
    // as closures over private variables (targets map)

    const tgt_router = this, unregister = this.unregister
    const targets = this._createTargetsMap()

    Object.defineProperties @ this, @{}
      registerTarget: @{} value: registerTarget
      unregisterTarget: @{} value: unregisterTarget
      _bindDispatchTarget: @{} value: false

    dispatch_target.id_route = id_route
    router.registerRoute @ id_route, dispatch_target
    return this

    async function dispatch_target(pkt, pktctx) ::
      const id_target = pkt.id_target
      let target = targets.get(id_target)
      if undefined === target ::
        target = await tgt_router.discoverTarget(id_target, pktctx)
        if undefined === target ::
          const channel = pktctx.channel
          return channel && channel.undeliverable(pkt, 'target')

      pktctx.tgt_router = tgt_router
      if unregister === await target(pkt, pktctx) ::
        unregisterTarget(id_target)


    function registerTarget(id_target, target) ::
      if 'function' !== typeof target ::
        throw new TypeError @ `Expected 'target' function`

      if targets.has @ id_target :: return false
      return targets.set @ id_target, target

    function unregisterTarget(id_target) ::
      return targets.delete @ id_target


  async discoverTarget(id_target, pktctx) ::
    const target = await this._discoverFirst @
      {id_target, pktctx}, this.targetDiscovery,
      err => this._on_error @ 'target.discovery', err

    if null != target ::
      if ! target.ephemeral ::
        this.registerTarget(id_target, target)
      return target

export default TargetRouter
