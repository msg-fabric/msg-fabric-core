import { o_assign, as_func } from './builtins.jsy'
import { bindXTargetAPI } from './xtgt_api.jsy'

export function bindCoreDispatchRouter(hub_router, hub, routes_map) ::
  // to create loopback, shim .dispatch onto a temporary prototype
  const loopback = @
      @{} dispatch, __proto__: hub_router
    .local_channel()

  const router_ctx = @{} __proto__: null,
    hub_router, timeouts: hub_router.timeouts,
    get local() :: return hub.local
    loopback, send: loopback.send

  const pktctx0 = @{} __proto__: router_ctx,
    get reply() :: return this.channel.send
    redispatch: dispatch_one

  const xctx_apis = bindXTargetAPI @ router_ctx

  return @{} dispatch, resolveRoute, loopback, router_ctx, xctx_apis


  async function dispatch(pkt, channel) ::
    dispatch_one @ pkt, @{} channel, __proto__: pktctx0

  async function dispatch_one(pkt, pktctx) ::
    pkt = await pkt
    if undefined === pkt || null === pkt :: return

    try ::
      const id_route = pkt[0] || ''
      let route = id_route
        ? routes_map.get(id_route)
        : (pktctx.channel || {}).peerRoute

      if undefined === route ::
        route = await resolveRoute(id_route, true, true)

        if undefined === route ::
          const channel = pktctx.channel
          return channel && channel.undeliverable(pkt, 'route')

      await route(pkt, pktctx)
      pktctx.channel = undefined // release channel referenece
    catch err ::
      pktctx.channel = undefined // release channel referenece
      hub_router._on_error @ 'dispatch', err, {pkt, pktctx}

  function _resolveRoute0(id_route) ::
    let route = routes_map.get(id_route)
    if undefined !== route :: return route

    let idx
    while -1 !== @ idx = id_route.lastIndexOf('.', idx) ::
      route = routes_map.get @ id_route.slice(0, idx--)
      if undefined !== route ::
        return route

  async function resolveRoute(id_route, allowDiscover, allowUpstream) ::
    let route = _resolveRoute0(id_route)
    if undefined === route ::

      if allowDiscover ::
        route = await hub_router.discoverRoute(id_route, router_ctx)

        if undefined === route ::
          // the route could have been added during discovery
          route = _resolveRoute0(id_route)

          if undefined === route && allowUpstream ::
            // otherwise just send upstream
            route = await hub_router.upstreamRoute(id_route)

    return route


export function bindCoreRouterAPI(hub_router, hub, routes_map) ::
  // Allow individual queries but not enumeration
  const router_api = @{}
    addRoute(id_route, route, override) ::
      as_func(route)
      if override || ! routes_map.has(id_route) ::
        routes_map.set @ id_route, route
        return @{} route, cancel: @=> this.removeRoute @ id_route, route

    removeRoute(id_route, route) ::
      if 1 === arguments.length ::
        route = id_route.route || id_route
        id_route = id_route.id_route || id_route[0]

      if null == route || route === routes_map.get(id_route) ::
        // remove only if route is currently at id_route
        return routes_map.delete @ id_route
      return false

    getRoute(id_route) ::
      return routes_map.get(id_route)

    hasRoute(id_route) ::
      return routes_map.has(id_route)

  return o_assign @ router_api,
    bindCoreDispatchRouter @
      hub_router, hub, routes_map
