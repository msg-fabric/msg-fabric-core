import { o_assign, o_defprop, is_func, as_func } from './builtins.jsy'

const timeout_ttl_base = @{}
  extend: false
  reset() :: this.extend = true; return this
  with_reset(fn) :: return (...args) => @ this.reset(), fn(...args)
  bind_cleanup(cleanup_fns) ::
    return async cancel => ::
      try ::
        for const cleanup of cleanup_fns ::
          if cleanup && ! this.extend ::
            await cleanup(this)

      finally ::
        if ! this.extend ::
          await cancel()

        this.extend = false


export function bindTimeouts(ms_interval) ::
  const p0 = Promise.resolve(), p_then = p0.then.bind(p0)
  const q = []

  tick_interval(ms_interval, q)
  o_assign @ add, @{}
    interval

    absent: (ms_min_timeout, callback, value) =>
      add @ ms_min_timeout, @=> callback @
        is_func(value) ? value() : value

    hashbelt: (ms_min_interval, max_length=4, create=Object) => ::
      interval @ ms_min_interval, @=> ::
        while max_length <= belt.length ::
          belt.pop()
        belt.unshift @ create()

      const belt = [create()]
      return belt

    ttl(ms_min_interval, ... cleanup_fns) ::
      const ttl = @{} __proto__: timeout_ttl_base
      ttl.cancel = interval @ ms_min_interval || 60000, ttl.bind_cleanup(cleanup_fns)
      return ttl

  return add.add = add


  function add(ms_min_timeout, callback) ::
    if callback ::
      const idx = Math.max @ 1, Math.ceil @ (0|ms_min_timeout) / ms_interval
      const qi = q[idx] || []
      if 0 === qi.length :: q[idx] = qi
      qi.push @ as_func @ callback

  function interval(ms_min_interval, callback) ::
    as_func(callback)
    const cancel = @=> :: interval = null
    let interval = @=> ::
      if null !== interval ::
        callback(cancel)
        add @ ms_min_interval, interval

    add @ ms_min_interval, interval
    return cancel

  function tick_interval(ms, lq) ::
    ms_interval = (0 | ms) || 67

    const tick = function () ::
      const tip = lq.shift()
      if tip :: tip.forEach @ p_then
      else if lq !== q && 0 === lq.length ::
        clearInterval(tid) // done

    const tid = setInterval @ tick, ms_interval
    if tid.unref :: tid.unref()

    add.changeInterval = ms => ::
      if ms_interval != ms ::
        // fork and finish current queue
        if 0 !== lq.length ::
          lq = lq.splice(0, lq.length)
        else clearInterval(tid)

        // start using new interval
        tick_interval(ms, q)

      return add

