import { createServer as _tcp_createServer, createConnection as _tcp_createConnection } from 'net'
import net_common from './_net_common.jsy'

tcp_plugin.tcp_plugin = tcp_plugin
export default function tcp_plugin(plugin_options={}) ::
  function as_tcp_url() :: return `tcp://${this.address}:${this.port}`

  return function(hub) ::
    const _common_ = net_common(hub, as_tcp_url)

    hub.registerConnectionProtocol @ 'tcp:', connect
    return hub.tcp = @: connect, createServer


    function connect(...args) ::
      args = _common_.unpackConnectArgs(args)
      return new Promise @ (resolve, reject) => ::
        _tcp_createConnection @ ...args, function() ::
          const sock = this.unref().setKeepAlive(true)
          const channel = _common_.bindChannel(sock)
          resolve(channel)
        .on @ 'error', reject

    function createServer(onPeer) ::
      const svr = _tcp_createServer @ function (sock) ::
        sock = sock.unref().setKeepAlive(false)
        const channel = _common_.bindChannel(sock)
        on_peer(channel)
      const on_peer = _common_.bindOnPeer(svr, onPeer)
      return _common_.init_server(svr)

