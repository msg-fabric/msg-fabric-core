export default bindStreamChannel
export function bindStreamChannel(rstream, wstream, api_channel, props) ::
  const channel = api_channel.bindChannel @ sendPktRaw, props
  connectPacketStream @ rstream, channel, true
  return channel

  function sendPktRaw(pkt) ::
    if ! Buffer.isBuffer @ pkt ::
      if pkt._raw_ ::
        pkt = Buffer.from @ pkt._raw_
      else if pkt.byteLength ::
        pkt = Buffer.from @ pkt
      else ::
        throw new TypeError @ `sendPktRaw expected 'pkt' as a Buffer or an object with a '_raw_' Buffer`

    if null === pkt ::
      return void wstream.end()
    return void wstream.write(pkt)


export function connectPacketStream(rstream, channel, endStreamOnShutdown) ::
  const shutdown = new Promise @ lifecycle
  return Object.defineProperty @ channel, 'shutdown', @: value: shutdown
  
  function lifecycle(resolve, reject) ::
    let pktDispatch = channel.bindDispatchPackets()

    rstream.on @ 'error', shutdown
    rstream.on @ 'close', shutdown
    rstream.on @ 'data', function (data) ::
      try :: pktDispatch(data)
      catch err ::
        return shutdown(err)

    function shutdown(err) ::
      if undefined === pktDispatch :: return
      pktDispatch = undefined
      if endStreamOnShutdown ::
        rstream.end()

      err ? reject(err) : resolve()

