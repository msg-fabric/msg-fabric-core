import stream_common from './_stream_common.jsy'

export default function net_common(hub, asURL) ::
  const sock_conn_info = sock => @:
    ip_remote: @{} asURL, address: sock.remoteAddress, port: sock.remotePort
    ip_local: @{} asURL, address: sock.localAddress, port: sock.localPort

  // shared implementation between net/tcp and tls implementations
  return @{} __proto__: stream_common(hub)
    createSocketChannel(sock) ::
      sock.setNoDelay(true)
      return Object.defineProperties @ 
        this.createChannel(sock, sock)
        @{} conn_info: @{} value: sock_conn_info.bind(sock)


    bindChannel(sock) ::
      const channel = this.createSocketChannel(sock)
      channel.sendRoutingHandshake(hub)
      return channel

    createClient(_impl_) ::
      return new Promise @ (resolve, reject) => ::
        _impl_ @ args, function() ::
          const sock = this.unref().setKeepAlive(true)
          const channel = _common_.bindChannel(sock)
          resolve(channel)
        .on @ 'error', reject

    createServer(onPeer, _impl_) ::
      const svr = _impl_ @ sock => ::
        sock = sock.unref().setKeepAlive(false)
        const channel = this.bindChannel(sock)
        on_peer(channel)

      const on_peer = this.bindOnPeer(svr, onPeer)

      svr.conn_info = function () ::
        const {address, port} = svr.address()
        return @{} ip_server: @{} asURL, address, port, 
      return svr

    bindOnPeer(svr, onPeer) ::
      if 'function' === typeof onPeer ::
        return onPeer
      if 'string' === typeof onPeer ::
        return channel => svr.emit @ onPeer, channel
      return () => null

    unpackConnectArgs(args) ::
      if 1 === args.length ::
        if 'string' === typeof args[0].href ::
          const {hostname:host, port} = args[0]
          args[0] = @{} host, port
      return args

    unpackConnectURL(url, on_url_connect) ::
      const {hostname:host, port} = url
      const options = {host, port}
      return on_url_connect
        ? on_url_connect(options, url)
        : options

