import {URL} from 'url'
import {bindStreamChannel} from './_stream_common'

export default net_common
export function net_common(hub, asURL) ::
  // shared implementation between net/tcp and tls implementations
  return @:
    init_server(svr) ::
      svr.conn_info = function () ::
        const {address, port} = svr.address()
        return @{} ip_server: @{} address, port, asURL
      return svr

    bindOnPeer(svr, onPeer) ::
      if 'function' === typeof onPeer ::
        return onPeer
      if 'string' === typeof onPeer ::
        return channel => svr.emit @ onPeer, channel
      return () => null

    bindChannel(sock) ::
      const channel = bindSocketChannel @
        sock, hub._api_channel, asURL

      channel.sendRoutingHandshake()
      return channel

    unpackConnectArgs(args) ::
      if 1 === args.length ::
        const conn_url = args[0]
        if 'string' === typeof conn_url || conn_url instanceof URL ::
          const {hostname:host, port} = new URL(conn_url)
          args = @# @{} host, port
      return args


export function bindSocketChannel(sock, api_channel, asURL) ::
  sock.setNoDelay(true)

  const conn_info = () => @:
    ip_remote: @{} asURL, address: sock.remoteAddress, port: sock.remotePort
    ip_local: @{} asURL, address: sock.localAddress, port: sock.localPort

  return bindStreamChannel @ sock, api_channel
    @: conn_info: @: value: conn_info

