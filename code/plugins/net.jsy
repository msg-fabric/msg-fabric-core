import {URL} from 'url'
import tcp_plugin from './tcp'
import {bindSocketSendMsgRaw} from '../streams'

module.exports = exports = net_plugin
export default net_plugin
export function net_plugin(plugin_options={}) ::
  const tcp = tcp_plugin(plugin_options)
  return function(hub) ::
    return hub.net = tcp(hub)


export function net_common(hub, asURL) ::
  // shared implementation between net/tcp and tls implementations
  return @:
    init_server(svr) ::
      svr.conn_info = function () ::
        const {address, port} = svr.address()
        return @{} ip_server: @{} address, port, asURL
      return svr

    bindOnPeer(svr, onPeer) ::
      if 'function' === typeof onPeer ::
        return onPeer
      if 'string' === typeof onPeer ::
        return channel => svr.emit @ onPeer, channel
      return () => null

    bindChannel(sock) ::
      const sendMsgRaw = bindSocketSendMsgRaw @
        sock.unref(), hub._api_channel, asURL
      console.log @: sendMsgRaw
      hub.on_connect_peer @ sendMsgRaw
      return sendMsgRaw.api

    unpackConnectArgs(args) ::
      if 1 === args.length ::
        const conn_url = args[0]
        if 'string' === typeof conn_url || conn_url instanceof URL ::
          const {hostname:host, port} = new URL(conn_url)
          args = @# @{} host, port
      return args



