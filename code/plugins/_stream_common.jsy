export function bindStreamChannel(stream, api_channel, props) ::
  const channel = api_channel.bindChannel @ sendMsgRaw, props
  connectPacketStream @ stream, channel, true
  return channel

  function sendMsgRaw(msg) ::
    if ! Buffer.isBuffer @ msg ::
      if ! Buffer.isBuffer @ msg._raw_ ::
        throw new TypeError @ `sendMsgRaw expected 'msg' as a Buffer or an object with a '_raw_' Buffer`
      msg = msg._raw_

    if null === msg ::
      return void stream.end()
    return void stream.write(msg)


export function connectPacketStream(stream, channel, endStreamOnShutdown) ::
  const shutdown = new Promise @ lifecycle
  return Object.defineProperty @ channel, 'shutdown', @: value: shutdown
  
  function lifecycle(resolve, reject) ::
    let pktDispatch = channel.bindDispatchPackets()

    stream.on @ 'error', shutdown
    stream.on @ 'close', shutdown
    stream.on @ 'data', function (data) ::
      try :: pktDispatch(data)
      catch err ::
        return shutdown(err)

    function shutdown(err) ::
      if undefined === pktDispatch :: return
      pktDispatch = undefined
      if endStreamOnShutdown ::
        stream.end()

      err ? reject(err) : resolve()

