import {sym_sampi, as_source_id, as_reply_id} from './base.jsy'
import {op_unpack} from './framing.jsy'

export default msg_source_api
export function msg_source_api(hub, shared) ::
  const { createContext, sendFrom_api, anon_api } = shared

  shared.source_api = source_api
  return source_api

  function source_api(src_id, ctx) ::
    const [from_route, from_target] = as_source_id(src_id)
    if null == from_route || null == from_target ::
      throw new Error @ 'Valid target and route required'

    if null == ctx ::
      ctx = createContext()
    else if 'function' === typeof ctx ::
      ctx = ctx(createContext)

    return @{} _recv_
      toJSON() :: return @{} [sym_sampi]: `${from_route} ${from_target}`

      anon(id) :: return anon_api @ id, null
      to(id) :: return sendFrom_api @ id, null, from_route, from_target, ctx


    function _recv_(pkt) ::
      const pkt_op = op_unpack(pkt)
      if undefined !== pkt_op.from_target ::
        let _reply, _anon

        const reply = () => _reply || @ _reply =
          sendFrom_api @ null, pkt_op, from_route, from_target, ctx
        const anon = () => _anon || @ _anon =
          anon_api @ null, pkt_op

        Object.defineProperties @ pkt, @{}
          has_reply: {value: true}
          reply: {get: reply}
          anon: {get: anon}

      if undefined !== pkt_op.msgid ::
        Object.defineProperties @ pkt, @{}
          resolveWith: @{} value(ans)::
            ctx.on_response @ pkt_op.msgid, ans

      return pkt

