import {sym_sampi, as_source_id} from './base.jsy'

export default msg_source_api
export function msg_source_api(shared) ::
  const { op_unpack, createContext, sendFrom_api, anon_api } = shared

  return shared.source_api = (src_id, ctx) => ::

    const [from_route, from_target] = as_source_id(src_id)
    if null == from_route || null == from_target ::
      throw new Error @ 'Valid target and route required'

    if null == ctx ::
      ctx = createContext()
    else if 'function' === typeof ctx ::
      ctx = ctx(createContext)

    const pkt_api = @{}
      anon() :: return anon_api @ null, this
      reply() :: return sendFrom_api @ null, this, from_route, from_target, ctx
      resolve(ans) ::
        const {msgid} = this
        if msgid :: return ctx.on_response(msgid, ans), true

    return @{} _recv_
      toJSON(obj={}) ::
        obj[sym_sampi] = `${from_route} ${from_target}`
        return obj

      anon(id) :: return anon_api @ id, null
      to(id) :: return sendFrom_api @ id, null, from_route, from_target, ctx


    function _recv_(pkt) ::
      const op = op_unpack @ pkt, Object.create(pkt_api)
      if pkt.is_pkt_split ::
        return ctx.on_split_pkt(pkt, op)
      return pkt

