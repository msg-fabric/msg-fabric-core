export function deferred() ::
  const e = {}
  e.promise = new Promise @ (resolve, reject) => ::
    e.resolve = resolve; e.reject = reject
  return e

export function timeoutReaper(timeout=5000) ::
  let q=[], reap=[]
  const cid = setInterval @ tick, Math.max(1000, timeout)
  if cid.unref :: cid.unref()
  return expire

  function expire(fn) ::
    q.push(fn)

  function tick() ::
    if 0 !== reap.length ::
      const err = new Error('Timeout')
      for const fn of reap :: fn(err)
    reap = q; q = []

