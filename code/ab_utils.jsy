export function arrayBufferConcat(listOfArrayBuffers, len) ::
  if 1 >= listOfArrayBuffers.length ::
    return listOfArrayBuffers[0]

  if null == len ::
    len = 0
    for const arr of listOfArrayBuffers ::
      len += arr.byteLength

  const u8 = new Uint8Array(len)
  let offset = 0
  for const arr of listOfArrayBuffers ::
    u8.set @ new Uint8Array(arr), offset
    offset += arr.byteLength
  return u8.buffer

export function asArrayBuffer(value, fieldName) ::
  if value instanceof ArrayBuffer ::
    return value

  if null == value ::
    return new ArrayBuffer(0)

  if 'function' === typeof value.compare :: // Buffer duck detector
    return new Uint8Array(value).buffer

  if value.buffer instanceof ArrayBuffer ::
    return value.buffer

  throw new TypeError @ `Expected ${fieldName} to be a TypedArray or ArrayBuffer`

