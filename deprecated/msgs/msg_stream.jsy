import { o_assign } from './util.jsy'


export const msg_stream_base = @{}
  __proto__: null

  writeMeta(body, meta) ::
    return this._writeRaw @: body, meta

  async writeAll(bodyParts, close) ::
    let cur, next
    for next of bodyParts ::
      if undefined !== cur ::
        await this.write(cur)
      cur = next

    if close :: this._lastPacket()
    return this.write(cur)

  writeAllEnd(bodyParts) ::
    return this.writeAll(bodyParts, true)

  end(body) ::
    this._lastPacket()
    return this.write(body)


export function bind_msg_stream(msg_stream_proto) ::
  return msg_stream

  function msg_stream(msgapi, opo, op_method, meta) ::
    const {id_route, id_target} = msgapi._mx_

    let seq=0
    return @{}
      __proto__: msg_stream_proto

      write(body) ::
        if undefined !== meta && null !== meta ::
          const p = this._writeRaw @: body, meta
          meta = undefined
          return p

        return this._writeRaw @: body

      _writeRaw(obj) ::
        o_assign @ obj, {id_route, id_target}
        const pkt = op_method @ obj,
          o_assign({seq: seq++}, opo)
        if seq <= 0 :: seq = null

        return new Promise @ resolve => ::
          pkt.on_sent = resolve
          msgapi._send_pkt(pkt)

      _lastPacket() :: seq = -seq


export const msg_stream = bind_msg_stream(msg_stream_base)
export default msg_stream

