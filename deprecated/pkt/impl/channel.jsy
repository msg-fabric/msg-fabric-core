import {o_create} from './common_base.jsy'

export default mixinCreateChannel
export function mixinCreateChannel(...args) ::
  for const pkts of args ::
    pkts.createChannel = bindCreateChannel @
      pkts.packPacket, pkts.unpackPacket


export const _channel_base_ = @{} __proto__: null
  toJSON() :: throw new Error @ 'Not serializable'
  inspect() :: return '«channel»'
  undeliverable
  on_send_error

function undeliverable(pkt, mode) ::
  const {id_route, id_target} = pkt
  console.warn @ '~~ undeliverable «channel»', @{}
    mode, id_route, id_target
function on_send_error(err) ::
  console.error('Channel send error:', err)


export function bindCreateChannel(packPacket, unpackPacket) ::
  if 'function' !== typeof packPacket ::
    throw new TypeError @ 'Expected packPacket function'
  if 'function' !== typeof unpackPacket ::
    throw new TypeError @ 'Expected unpackPacket function'

  return createChannel

  function createChannel(dispatch, send_packed, channel_base) ::
    if 'function' !== typeof dispatch ::
      if 'function' !== typeof dispatch.dispatch ::
        throw new TypeError @ 'Expected dispatch function'
      dispatch = dispatch.dispatch

    if 'function' !== typeof send_packed ::
      throw new TypeError @ 'Expected send_packed function'

    if null == channel_base ::
      channel_base = _channel_base_


    const channel_id = send_packed.channel_id
    if null == channel_id ::
      throw new TypeError @ 'Expected send_packed.channel_id'

    let id_local, id_remote
    if 'string' === typeof channel_id ::
      id_local = id_remote = channel_id
    else ::
      id_local = channel_id[0] || channel_id[1]
      id_remote = channel_id[1] || channel_id[0]

    const props = @{}
      send: @{} value: send
      id_local: @{} value: id_local
      id_remote: @{} value: id_remote

    if undefined === channel_base.undeliverable ::
      props.undeliverable = @{} value: undeliverable
    if undefined === channel_base.on_send_error ::
      props.on_send_error = @{} value: on_send_error

    const chan = o_create(channel_base, props)
    return @[] recv, chan


    function recv(pktList) ::
      pktList = pktList.map(unpackPacket)
      return dispatch @ pktList, chan

    function send(obj) ::
      const d_pkt = null === obj ? obj : packPacket(obj)
      const p = Promise.resolve(d_pkt)
        .then(send_packed, on_send_err)

      // Trigger on_sent after send_packed's backpressure promise result.
      if undefined !== obj.on_sent ::
        p.then @=> obj.on_sent()

    function on_send_err(err) ::
      if chan.on_send_err ::
        chan.on_send_error(err)
      else on_send_error(err)

