import { PktJsonBase, PktDataBase, bind_binaryCallPacket } from '../common_binary.jsy'
import { encode_utf8, decode_utf8, unpack_base64, packBody, concatBody, base64 } from './util.jsy'

export default function({as_data}) ::

  const PktJson = @{}  __proto__: PktJsonBase
    buffer() :: return encode_utf8 @ this._body_
    base64

  const PktData = @{} __proto__: PktDataBase
    text() :: return this._body_.toString('utf-8')
    buffer() :: return this._body_
    base64


  return bind_binaryCallPacket @:
    decode_utf8, unpack_base64, as_data, packBody, packParts, concatBody
    PktJson, PktData


function packParts(hdr, body) ::
  if body ::
    return packPartsBuffer @ hdr, packBody(body)
  else return hdr

function packPartsBuffer(hdr, body) ::
  hdr = Buffer.from(hdr)
  return Buffer.concat @# hdr, body

